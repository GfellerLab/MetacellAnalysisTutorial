[["index.html", "Metacell Tutorial This tutorial", " Metacell Tutorial Aurélie Gabriel, Léonard Hérault, Mariia Bilous, David Gfeller 2023-11-20 This tutorial In this tutorial, we describe the different steps that should be followed to build metacells1 from single-cell data using three frameworks: SuperCell2 (tutorial in 3.1), (ii) Metacells version 2 (MC23) (tutorial in 3.2), and (iii) SEACells4 (tutorial in 3.3). We also show how to obtain metacells by running these methods using a command line tool that we provide as part of the MetacellAnalysisToolkit (MCAT) github repository. This repository also contains the MetacellAnalysisToolkit R package which provides R functions to compute QC metrics and visualization functions to evaluate the quality of metacells. In chapter ??, we use MCAT to build metacells on a continuous dataset of CD34+ cells and use the R package to visualize the constructed metacells. In chapter 4, we describe how to use the R package to evaluate the quality of the metacells. Finally, we provide examples of downstream analyses performed at the metacell level. These analyses include clustering, differential analysis, data integration and gene regulatory network analysis. References "],["requirements.html", "Chapter 1 Requirements", " Chapter 1 Requirements This chapter describes how to obtain the packages and data needed to reproduce the analyses performed in this tutorial. "],["installations.html", "1.1 Installations", " 1.1 Installations 1.1.1 Using conda (recommended) To build a conda environment containing the three metacell building tools used in this tutorial (SuperCell, MC2 and SEACells), please follow the instructions provided in the README of our MetacellAnalysisToolkit github repository. library(reticulate) conda_env &lt;- conda_list()[reticulate::conda_list()$name == &quot;MetacellAnalysisToolkit&quot;,&quot;python&quot;] use_condaenv(conda_env) 1.1.2 Without conda If you don’t have conda, you can use the following instructions: Set up a python virtual environment with MC2 and SEACells installed: pip install virtualenv virtualenv my_env source my_env/bin/activate # Installing SEACells git clone https://github.com/dpeerlab/SEACells.git cd SEACells python setup.py install cd .. pip install -r SEACells_requirements.txt pip install ipywidgets pip install jupyter # Install MC2 pip install git+https://github.com/tanaylab/metacells In R, install the SuperCell package: remotes::install_github(&quot;GfellerLab/SuperCell&quot;, force = TRUE, upgrade = FALSE) To run python function in R, install reticulate: install.packages(&#39;reticulate&#39;) To use the python libraries installed in the virtual environment, define the RETICULATE_PYTHON variable as follow: echo &#39;RETICULATE_PYTHON=my_env/bin/python&#39; &gt; &#39;.Renviron&#39; "],["PBMC-data.html", "1.2 Retrieve a discrete dataset (PBMCs dataset)", " 1.2 Retrieve a discrete dataset (PBMCs dataset) To test metacell construction on a discrete dataset, we retrieved the 3k PBMCs from scanpy datasets as follows: import scanpy as sc import os adata = sc.datasets.pbmc3k() adata_proc = sc.datasets.pbmc3k_processed() adata = adata[adata_proc.obs_names].copy() adata.obs = adata_proc.obs.copy() adata.uns = adata_proc.uns.copy() adata.obsm = adata_proc.obsm.copy() adata.obsp = adata_proc.obsp.copy() adata.X = adata.X.astype(&quot;float32&quot;) raw_ad = sc.AnnData(adata.X.copy()) raw_ad.obs_names, raw_ad.var_names = adata.obs_names, adata.var_names adata.raw = raw_ad The data are saved in the following file for future analyses in python (use of SEACells and MC2): “data/3k_pbmc/singlecell_anndata_filtered.h5ad”. directory = os.path.join(&quot;data&quot;, &quot;3k_pbmc&quot;) if not os.path.exists(directory): os.makedirs(directory) adata.write_h5ad(os.path.join(&quot;data&quot;, &quot;3k_pbmc&quot;, &quot;singlecell_anndata_filtered.h5ad&quot;)) The data are saved in the following file for future analyses in R (use of SuperCell): “data/3k_pbmc/singlecell_seurat_filtered.rds”. library(reticulate) library(Seurat) #&gt; The legacy packages maptools, rgdal, and rgeos, underpinning this package #&gt; will retire shortly. Please refer to R-spatial evolution reports on #&gt; https://r-spatial.org/r/2023/05/15/evolution4.html for details. #&gt; This package is now running under evolution status 0 #&gt; Attaching SeuratObject library(anndata) adata &lt;- anndata::read_h5ad(file.path(&quot;data/3k_pbmc/singlecell_anndata_filtered.h5ad&quot;)) raw_counts &lt;- Matrix::t(adata$raw$X) colnames(raw_counts) &lt;- rownames(adata$obs) rownames(raw_counts) &lt;- rownames(adata$var) pbmc &lt;- CreateSeuratObject(counts = raw_counts, meta.data = adata$obs) #&gt; Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes #&gt; (&#39;-&#39;) saveRDS(pbmc, file = paste0(&quot;data/3k_pbmc/singlecell_seurat_filtered.rds&quot;)) "],["CD34-data.html", "1.3 Retrieve a continuous dataset (CD34 dataset)", " 1.3 Retrieve a continuous dataset (CD34 dataset) To test metacell construction on discrete dataset, we retrieved the CD34 dataset provided by Persad et al.:5 mkdir data/CD34 wget -O data/CD34/cd34_multiome_rna.h5ad &#39;https://zenodo.org/record/6383269/files/cd34_multiome_rna.h5ad?download=1&#39; import scanpy as sc import os adata = sc.read(os.path.join(&quot;data&quot;, &quot;CD34&quot;, &quot;cd34_multiome_rna.h5ad&quot;)) adata.X.sort_indices() raw_ad = sc.AnnData(adata.X.copy()) raw_ad.obs_names, raw_ad.var_names = adata.obs_names, adata.var_names adata.raw = raw_ad sc.pl.embedding(adata, &#39;X_umap&#39;, color=&#39;celltype&#39;) #&gt; /opt/conda/envs/MetacellAnalysisToolkit/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via &#39;c&#39;. Parameters &#39;cmap&#39; will be ignored #&gt; cax = scatter( The data are saved in the following file for future analyses in python (use of SEACells and MC2): “data/CD34/singlecell_anndata_filtered.h5ad”. directory = os.path.join(&quot;data&quot;, &quot;cd34_multiome&quot;) if not os.path.exists(directory): os.makedirs(directory) adata.write_h5ad(os.path.join(&quot;data&quot;, &quot;CD34&quot;, &quot;singlecell_anndata_filtered.h5ad&quot;)) The data are saved in the following file for future analyses in R (use of SuperCell): “data/CD34/singlecell_seurat_filtered.rds”. library(reticulate) library(Seurat) library(anndata) adata &lt;- anndata::read_h5ad(file.path(&quot;data/CD34/singlecell_anndata_filtered.h5ad&quot;)) raw_counts &lt;- Matrix::t(adata$raw$X) colnames(raw_counts) &lt;- rownames(adata$obs) rownames(raw_counts) &lt;- rownames(adata$var) cd34 &lt;- CreateSeuratObject(counts = raw_counts, meta.data = adata$obs) saveRDS(cd34, file = file.path(&quot;data/CD34/singlecell_seurat_filtered.rds&quot;)) References "],["HLCA-data.html", "1.4 Retrieve the lung atlas dataset", " 1.4 Retrieve the lung atlas dataset 1.4.1 Downloading the atlas To illustrate how metacells can be used in the context of single-cell data integration, we used a cell atlas of the human lung (core) available on cellxgene. To download the data, please choose the .h5ad option after clicking on the download button for the core atlas (3 tissues, 584’944 cells). Save these data in the data/HLCA/ directory. Please note that this may take some time (~45 mins) as the file is quite large (5.6 GB). 1.4.2 Splitting atlas by datasets We will use anndata to read in backed mode (saving a lot of memory) the whole atlas and write one h5ad file for each dataset. This should take less than 10 minutes. If you are limited in time feel free to process only a subset of the dataset. t0.split &lt;- Sys.time() library(anndata) adata &lt;- read_h5ad(&quot;data/HLCA/local.h5ad&quot;,backed = &quot;r&quot;) adata$var_names &lt;- adata$var$feature_name # We will use gene short name for downstream analyses datasets &lt;- unique(adata$obs$dat) # If you are limited in time you can process on half of the datasets (uncomment th following line) # datasets &lt;- datasets[1:7] print(dim(adata)) lapply(datasets,FUN = function(x) { dir.create(paste0(&quot;data/HLCA/datasets/&quot;,x),recursive = T) adata.dataset &lt;- AnnData(X = adata[adata$obs$dataset == x]$raw$X, var = adata[adata$obs$dataset == x]$var, obs = adata[adata$obs$dataset == x]$obs) #This will allow us to construct supervised metacell for each cell type in each sample later in the tutorial adata.dataset$obs$ann &lt;- as.character(adata.dataset$obs$ann_level_3) # For cell without an annotation at the 3rd level we will use the second level of annotation adata.dataset$obs$ann[adata.dataset$obs$ann_level_3 == &#39;None&#39;] = as.character(adata.dataset$obs$ann_level_2[adata.dataset$obs$ann_level_3 == &#39;None&#39;]) adata.dataset$obs$ann_sample &lt;- paste0(adata.dataset$obs$ann,&quot;_&quot;,adata.dataset$obs$sample) write_h5ad(adata.dataset,paste0(&quot;data/HLCA/datasets/&quot;,x,&quot;/sc_adata.h5ad&quot;)) } ) remove(adata) gc() tf.split &lt;- Sys.time() tf.split - t0.split "],["the-metacell-concept.html", "Chapter 2 The metacell concept", " Chapter 2 The metacell concept Metacells correspond to partitions of single-cell data into disjoint homogeneous groups of highly similar cells followed by aggregation of their profiles6. This concept relies on the assumption that most of the variability within metacells corresponds to technical noise and not to biologically relevant heterogeneity. Using metacells enables users to: (i) remove the noise while preserving and enhancing biological signal in sparse single-cell genomics data and, (ii) address computational challenges due to the large size of these data. The metacell concept. Several studies have been built upon the metacell concept. In this tutorial, we consider three tools providing standalone metacell construction frameworks and describe the different steps that should be followed to build metacells using these tools: (i) SuperCell7 (tutorial in 3.1), (ii) Metacells version 2 (MC28) (tutorial in 3.2), and (iii) SEACells9 (tutorial in 3.3). References "],["Metacell-construction-chapter.html", "Chapter 3 Constructing metacells", " Chapter 3 Constructing metacells In this chapter, we will demonstrate metacell construction using three different methods: SuperCell in R, MetaCell-2 (MC2) and SEACells in Pyhton. For this, we will first use a dataset of PBMCs from study. This dataset contains around 3K cells which is an example of a dataset with well defined cell types. For an example of more continuous data, see chapter ??. "],["SuperCell-construction.html", "3.1 SuperCell (R)", " 3.1 SuperCell (R) In this section, we construct metacells using the R package SuperCell. 3.1.1 Method The SuperCell method first reduces the gene expression space using principal component analysis (PCA) and computes euclidean distances based on the reduced space. Using the euclidean distances, a single-cell kNN graph is built and metacells are identified by applying the walktrap community detection algorithm. The number of metacells obtained can be chosen by the user by defining the graining level parameter. The code provided in this section is adapted from the author’s github documentation. For more information on the method, please refer to our review10 and the original paper.11 Importing R packages To run SuperCell, the following R package needs to be imported: if(system.file(package=&#39;SuperCell&#39;) == &quot;&quot;){ remotes::install_github(&quot;GfellerLab/SuperCell&quot;, force = TRUE, upgrade = FALSE) } library(SuperCell) 3.1.2 Data loading We will run SuperCell on a single-cell dataset composed of 2638 peripheral blood mononuclear cells (PBMCs) available in the scanpy package. Please follow the section 1.2 to retrieve these data from the scanpy package, preprocess and save the data in the following file: “data/3k_pbmc/singlecell_seurat_filtered.rds”. print(proj_name) #&gt; [1] &quot;3k_pbmc&quot; celltype_colors &lt;- c( &quot;CD14+ Monocytes&quot; = &quot;#E69F00&quot;, # orange &quot;B cells&quot; = &quot;#56B4E9&quot;, # sky blue &quot;CD4 T cells&quot; = &quot;#009E73&quot;, # bluish green &quot;NK cells&quot; = &quot;#F0E442&quot;, # yellow &quot;CD8 T cells&quot; = &quot;#0072B2&quot;, # blue &quot;FCGR3A+ Monocytes&quot; = &quot;#D55E00&quot;, # vermillion &quot;Dendritic cells&quot; = &quot;#CC79A7&quot;, # reddish purple &quot;Megakaryocytes&quot; = &quot;#000000&quot; # black ) sc_data = readRDS(paste0(&quot;data/&quot;, proj_name, &quot;/singlecell_seurat_filtered.rds&quot;)) 3.1.3 Filtering steps In this tutorial, the data have been pre-filtered and SuperCell does not require further filtering steps. 3.1.4 Building metacells Metacells construction using SuperCell requires one main input, i.e. a matrix of log-normalized gene expression data which will be used to compute PCA to subsequently build a knn graph for metacells identification. Important optional inputs are: (i) the graining level (gamma parameter), (ii) the number of neighbors to consider for the knn graph (k.knn parameter), (iii) the number of principal components to use to generate the knn graph (n.pc parameter), and (iv) the number of most variable genes to consider for PCA (n.var.genes parameter). Data pre-processing SuperCell builds its knn graph based on Euclidean distances defined in the PCA space. PCA computation is performed on the log-normalized gene expression data in the SCimplify SuperCell function. In the following code chunk, we use Seurat to normalize and visualize the data: library(Seurat) #&gt; The legacy packages maptools, rgdal, and rgeos, underpinning this package #&gt; will retire shortly. Please refer to R-spatial evolution reports on #&gt; https://r-spatial.org/r/2023/05/15/evolution4.html for details. #&gt; This package is now running under evolution status 0 #&gt; Attaching SeuratObject sc_data &lt;- NormalizeData(sc_data, normalization.method = &quot;LogNormalize&quot;) sc_data &lt;- FindVariableFeatures(sc_data, nfeatures = 2000) sc_data &lt;- ScaleData(sc_data) #&gt; Centering and scaling data matrix sc_data &lt;- RunPCA(sc_data, npcs = 50, verbose = F) sc_data &lt;- RunUMAP(sc_data, reduction = &quot;pca&quot;, dims = c(1:30), n.neighbors = 15, verbose = F) #&gt; Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #&gt; To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; #&gt; This message will be shown once per session UMAPPlot(sc_data, group.by = annotation_label, cols = celltype_colors) Setting up SuperCell parameters In this tutorial, we will run SuperCell using the 30 first principal components resulting from the PCA. We chose a graining level of 25 and a number of neighbors of 15 for the knn step. gamma = 10 # the requested graining level. k_knn = 15 # the number of neighbors considered to build the knn network. nb_var_genes = 2000 # number of the top variable genes to use for dimensionality reduction nb_pc = 50 # the number of principal components to use. Metacells identification The metacells are identified using the SCimplify function from the SuperCell package. MC &lt;- SuperCell::SCimplify(Seurat::GetAssayData(sc_data, slot = &quot;data&quot;), # single-cell log-normalized gene expression data k.knn = k_knn, gamma = gamma, # n.var.genes = nb_var_genes, n.pc = nb_pc, genes.use = Seurat::VariableFeatures(sc_data) ) SCimplify returns a list containing the following main elements: (i) the single-cell assignments to metacells (membership), (ii) the metacell sizes (supercell_size), (iii) the single-cell graph (graph.singlecell), (iv) the metacell graph (graph.supercells), (v) the genes used for metacell identification (genes.use). Retrieve aggregated metacell data The supercell_GE() function can be used to generate a metacell counts matrix (aggregation of gene expression across all cells belonging to each metacell). Two modes can be used for single-cell aggregation, i.e. averaging of log-normalized gene expression or summing up raw counts (using the mode parameter). Note that we provide raw counts for the aggregation in this tutorial to match the aggregation steps using PC2 and SEAcells (see 3.2 and 3.3). Data normalization will thus be needed for downstream analyses on the metacell counts matrix. MC.GE &lt;- supercell_GE(Seurat::GetAssayData(sc_data, slot = &quot;counts&quot;), MC$membership, mode = &quot;sum&quot; ) dim(MC.GE) #&gt; [1] 32738 264 3.1.5 Annotate metacells (using available annotations) We can assign each metacell to a particular annotation using the supercell_assign() function. By default, this function assigns each metacell to a cluster with the largest Jaccard coefficient to avoid biases towards very rare or very abundant clusters. Alternatively, assignment can be performed using relative (method = \"relative\", may cause biases towards very small populations) or absolute (method = \"absolute\", may cause biases towards large populations) abundance. print(annotation_label) #&gt; 3k_pbmc #&gt; &quot;louvain&quot; MC$annotation &lt;- supercell_assign(clusters = sc_data@meta.data[, annotation_label], # single-cell annotation supercell_membership = MC$membership, # single-cell assignment to metacells method = &quot;absolute&quot; ) head(MC$annotation) #&gt; 1 2 3 4 #&gt; &quot;B cells&quot; &quot;CD14+ Monocytes&quot; &quot;CD4 T cells&quot; &quot;NK cells&quot; #&gt; 5 6 #&gt; &quot;CD4 T cells&quot; &quot;CD4 T cells&quot; The SuperCell package provides the supercell_plot function to visualize the metacell network (igraph object where number of nodes corresponds to number of metacells), which is stored in the MC list in graph.supercells. The metacells can be colored with respect to a vector of annotation. supercell_plot( MC$graph.supercells, group = MC$annotation, seed = 1, alpha = -pi/2, main = &quot;Metacells colored by cell line assignment&quot; ) 3.1.6 Save output For future downstream analyses in R (section 5.1), metacell counts can be saved in a Seurat object. Here we also save in the Seurat object the PCA components and genes used in SCimplify for future QC analysis (See 4). colnames(MC.GE) &lt;- as.character(1:ncol(MC.GE)) MC.seurat &lt;- CreateSeuratObject(counts = MC.GE, meta.data = data.frame(size = as.vector(table(MC$membership))) ) MC.seurat[[annotation_label]] &lt;- MC$annotation # save single-cell membership to metacells in the MC.seurat object MC.seurat@misc$cell_membership &lt;- data.frame(row.names = names(MC$membership), membership = MC$membership) MC.seurat@misc$var_features &lt;- MC$genes.use # Save the PCA components and genes used in SCimplify PCA.res &lt;- irlba::irlba(scale(Matrix::t(sc_data@assays$RNA@data[MC$genes.use, ])), nv = nb_pc) pca.x &lt;- PCA.res$u %*% diag(PCA.res$d) rownames(pca.x) &lt;- colnames(sc_data@assays$RNA@data) MC.seurat@misc$sc.pca &lt;- CreateDimReducObject( embeddings = pca.x, loadings = PCA.res$v, key = &quot;PC_&quot;, assay = &quot;RNA&quot; ) print(paste0(&quot;Saving metacell object for the &quot;, proj_name, &quot; dataset using &quot;, MC_tool)) #&gt; [1] &quot;Saving metacell object for the 3k_pbmc dataset using SuperCell&quot; saveRDS(MC.seurat, file = paste0(&#39;./data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.rds&#39;)) We can also use the supercell_2_Seurat() function from the SuperCell package. This function takes as inputs the metacell count matrix (output of the SuperCell supercell_GE() function) and the output of the SuperCell SCimplify() function to output a Seurat object containing normalized metacells gene expression data as well as the first (N.comp) principal components of PCA performed internally using user defined set of genes (by default the genes used for metacells constructions). MC.seurat &lt;- supercell_2_Seurat( SC.GE = MC.GE, SC = MC, fields = c(&quot;annotation&quot;, &quot;supercell_size&quot;), # elements of MC to save as metacell metadata var.genes = MC$genes.use, N.comp = 10 ) saveRDS(MC.seurat, file = paste0(&#39;./data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.rds&#39;)) For future downstream analyses in python (section ??), metacell counts can be saved in an Anndata object: MC.seurat.ad &lt;- anndata::AnnData( X = Matrix::t(Seurat::GetAssayData(MC.seurat, slot = &quot;counts&quot;)), obs = MC.seurat@meta.data ) anndata::write_h5ad(anndata = MC.seurat.ad, filename = paste0(&#39;./data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.h5ad&#39;)) #&gt; used (Mb) gc trigger (Mb) max used (Mb) #&gt; Ncells 3435525 183.5 5974597 319.1 4945498 264.2 #&gt; Vcells 20463953 156.2 65102028 496.7 65101750 496.7 References "],["MC2-construction.html", "3.2 MC2 (Python)", " 3.2 MC2 (Python) In this section, we construct metacells using Metacell-2 (MC2) implemented in Python. 3.2.1 Method Metacell-2 (MC2) is a python tool to construct metacells and is the updated version of the MetaCell algorithm, which introduced the concept of metacell. MC2 applies a two-phase divide-and-conquer approach. Cells are randomly divided into piles of ~10k cells and initial metacells are built applying a MetaCell-like approach per pile, i.e. based on a single-cell kNN graph built from log-normalized counts using a set of highly variable genes. Then, transcriptionally similar metacells are grouped into metagroup piles for the identification of final metacells and outliers identification. Note that prior to metacell identification, the MC2 framework recommends gene filtering steps. The choice of the genes used by the method is of high importance to assure good quality of the metacells. The code provided in this section is adapted from the author’s tutorial. For more information on the method, please refer to our review12 and the original paper.13 Importing python packages To run MC2, the following python packages need to be imported: import os import numpy as np import pandas as pd import anndata as ad import scanpy as sc import matplotlib.pyplot as plt import seaborn as sns import metacells as mc If you don’t have these packages installed, please refer to the section 1.1. 3.2.2 Data loading We will run Metacell-2 (MC2) on a single-cell dataset composed of around 3000 peripheral blood mononuclear cells (PBMCs). Please follow the section 1.2 to retrieve these data from the scanpy package and save the data in the following file: “data/3k_pbmc/singlecell_anndata_filtered.h5ad”. MC_tool = &quot;MC2&quot; proj_name = &quot;3k_pbmc&quot; ad = sc.read(os.path.join(&quot;data&quot;, proj_name, &quot;singlecell_anndata_filtered.h5ad&quot;)) ad.X = ad.raw.X.copy() We initialize the name of the anndata (in the unstructured annotations) object using the mc.ut.set_name() function from the MC2 package. mc.ut.set_name(ad, proj_name) 3.2.3 Filtering steps MC2 requires that standard filtering steps such as doublet filtering are performed outside of the MC2 framework. In addition to standard data filtering steps, the MC2 package proposes functions to filter the single-cell data at the gene and at the cell level (See author’s vignette). At the gene level, the filtering steps consist in excluding genes based on biological knowledge (e.g. mitochrondrial genes) as well as based on their expression levels. The latter genes include genes with zero expression or low expression levels and “bursty lonely genes” (i.e., genes with high expression levels but no correlation with any other gene). At the cell level, filtering is performed based on cells UMI counts. Gene filtering In the following code chunk, we exclude genes using the mc.pl.exclude_genes()function from the MC2 package. Based on the authors vignette, we consider a minimal list of genes to exclude, i.e., sex-specific and non-coding genes as well as the mitochondrial genes. To complete this list of genes, an iterative approach can be used following the guidelines of the MC2 authors in a second vignette. The mc.pl.exclude_genes() function will filter out: i) the known-to-be-excluded genes defined by the user as gene names or gene names patterns (EXCLUDED_GENE_NAMES and EXCLUDED_GENE_PATTERNS parameters respectively), and ii) the “bursty lonely genes”. EXCLUDED_GENE_NAMES = [&quot;XIST&quot;, &quot;MALAT1&quot;, &quot;NEAT1&quot;] EXCLUDED_GENE_PATTERNS = [&#39;MT-.*&#39;] mc.pl.exclude_genes( ad, excluded_gene_names=EXCLUDED_GENE_NAMES, excluded_gene_patterns=EXCLUDED_GENE_PATTERNS, random_seed=123456 ) #&gt; set 3k_pbmc.var[bursty_lonely_gene]: 0 true (0%) out of 32738 bools #&gt; set 3k_pbmc.var[properly_sampled_gene]: 16579 true (50.64%) out of 32738 bools #&gt; set 3k_pbmc.var[excluded_gene]: 16174 true (49.4%) out of 32738 bools Cell filtering based on UMIs counts In the MC2 framework, cells with very low and very high UMI content will be filtered out (PROPERLY_SAMPLED_MIN_CELL_TOTAL, PROPERLY_SAMPLED_MAX_CELL_TOTAL variables defining thresholds in the next code chunk). Also, cell filtering based on UMI counts in excluded genes is also performed(PROPERLY_SAMPLED_MAX_EXCLUDED_GENES_FRACTION variable). Since our dataset has been pre-filtered, very lenient cutoffs will be used in this tutorial. The following code chunk defines these parameters. To adapt them to your datasets, we advise you to explore the distributions of total UMI counts and UMI counts in excluded genes, as recommended and described in the MC2 original vignette. PROPERLY_SAMPLED_MIN_CELL_TOTAL = 200 PROPERLY_SAMPLED_MAX_CELL_TOTAL = 10000 PROPERLY_SAMPLED_MAX_EXCLUDED_GENES_FRACTION = 0.25 The number of UMIs in excluded genes is computed using the mc.tl.compute_excluded_gene_umis() function and cells are filtered out using the mc.pl.exclude_cells() function. Additional cells can be filtered out by adding a cell description columns in the obs data frame in the anndata oject. This annotation should be a boolean indicating whether the cell should filtered out or not. The name of this column should be provided to the mc.pl.exclude_cells() function via the additional_cells_masks parameter. mc.tl.compute_excluded_gene_umis(ad) mc.pl.exclude_cells( ad, properly_sampled_min_cell_total=PROPERLY_SAMPLED_MIN_CELL_TOTAL, properly_sampled_max_cell_total=PROPERLY_SAMPLED_MAX_CELL_TOTAL, properly_sampled_max_excluded_genes_fraction=PROPERLY_SAMPLED_MAX_EXCLUDED_GENES_FRACTION # , # additional_cells_masks=[&quot;|doublet_cell&quot;] ) #&gt; set 3k_pbmc.obs[properly_sampled_cell]: 2638 true (100%) out of 2638 bools #&gt; set 3k_pbmc.obs[excluded_cell]: 0 true (0%) out of 2638 bools After performing the two-step filtering (genes and cells), the “cleaned” data can be extracted using the mc.pl.extract_clean_data() function. # Extract clean dataset (with filtered cells and genes) ad = mc.pl.extract_clean_data(ad) #&gt; set 3k_pbmc.clean.obs[full_cell_index]: 2638 int32s #&gt; set 3k_pbmc.clean.var[full_gene_index]: 16564 int32s 3.2.4 Building metacells Defining lateral genes To build metacells, we need to define lateral genes, which are genes with strong biological signal which is independent of cell-state, e.g. cell-cycle genes. These genes will be ignored for computing cells similarity and building metacells but will be considered to define outlier cells (i.e., expression levels of lateral genes should be consistent within metacells). In the following chunk, we consider a minimal list of lateral genes (provided by the MC2 authors) including cell-cycle and ribosomal genes and mark them in the MC2 object using the mc.pl.mark_lateral_genes() function. LATERAL_GENE_NAMES = [ &quot;ACSM3&quot;, &quot;ANP32B&quot;, &quot;APOE&quot;, &quot;AURKA&quot;, &quot;B2M&quot;, &quot;BIRC5&quot;, &quot;BTG2&quot;, &quot;CALM1&quot;, &quot;CD63&quot;, &quot;CD69&quot;, &quot;CDK4&quot;, &quot;CENPF&quot;, &quot;CENPU&quot;, &quot;CENPW&quot;, &quot;CH17-373J23.1&quot;, &quot;CKS1B&quot;, &quot;CKS2&quot;, &quot;COX4I1&quot;, &quot;CXCR4&quot;, &quot;DNAJB1&quot;, &quot;DONSON&quot;, &quot;DUSP1&quot;, &quot;DUT&quot;, &quot;EEF1A1&quot;, &quot;EEF1B2&quot;, &quot;EIF3E&quot;, &quot;EMP3&quot;, &quot;FKBP4&quot;, &quot;FOS&quot;, &quot;FOSB&quot;, &quot;FTH1&quot;, &quot;G0S2&quot;, &quot;GGH&quot;, &quot;GLTSCR2&quot;, &quot;GMNN&quot;, &quot;GNB2L1&quot;, &quot;GPR183&quot;, &quot;H2AFZ&quot;, &quot;H3F3B&quot;, &quot;HBM&quot;, &quot;HIST1H1C&quot;, &quot;HIST1H2AC&quot;, &quot;HIST1H2BG&quot;, &quot;HIST1H4C&quot;, &quot;HLA-A&quot;, &quot;HLA-B&quot;, &quot;HLA-C&quot;, &quot;HLA-DMA&quot;, &quot;HLA-DMB&quot;, &quot;HLA-DPA1&quot;, &quot;HLA-DPB1&quot;, &quot;HLA-DQA1&quot;, &quot;HLA-DQB1&quot;, &quot;HLA-DRA&quot;, &quot;HLA-DRB1&quot;, &quot;HLA-E&quot;, &quot;HLA-F&quot;, &quot;HMGA1&quot;, &quot;HMGB1&quot;, &quot;HMGB2&quot;, &quot;HMGB3&quot;, &quot;HMGN2&quot;, &quot;HNRNPAB&quot;, &quot;HSP90AA1&quot;, &quot;HSP90AB1&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA6&quot;, &quot;HSPD1&quot;, &quot;HSPE1&quot;, &quot;HSPH1&quot;, &quot;ID2&quot;, &quot;IER2&quot;, &quot;IGHA1&quot;, &quot;IGHA2&quot;, &quot;IGHD&quot;, &quot;IGHG1&quot;, &quot;IGHG2&quot;, &quot;IGHG3&quot;, &quot;IGHG4&quot;, &quot;IGHM&quot;, &quot;IGKC&quot;, &quot;IGKV1-12&quot;, &quot;IGKV1-39&quot;, &quot;IGKV1-5&quot;, &quot;IGKV3-15&quot;, &quot;IGKV4-1&quot;, &quot;IGLC2&quot;, &quot;IGLC3&quot;, &quot;IGLC6&quot;, &quot;IGLC7&quot;, &quot;IGLL1&quot;, &quot;IGLL5&quot;, &quot;IGLV2-34&quot;, &quot;JUN&quot;, &quot;JUNB&quot;, &quot;KIAA0101&quot;, &quot;LEPROTL1&quot;, &quot;LGALS1&quot;, &quot;LINC01206&quot;, &quot;LTB&quot;, &quot;MCM3&quot;, &quot;MCM4&quot;, &quot;MCM7&quot;, &quot;MKI67&quot;, &quot;MT2A&quot;, &quot;MYL12A&quot;, &quot;MYL6&quot;, &quot;NASP&quot;, &quot;NFKBIA&quot;, &quot;NUSAP1&quot;, &quot;PA2G4&quot;, &quot;PCNA&quot;, &quot;PDLIM1&quot;, &quot;PLK3&quot;, &quot;PPP1R15A&quot;, &quot;PTMA&quot;, &quot;PTTG1&quot;, &quot;RAN&quot;, &quot;RANBP1&quot;, &quot;RGCC&quot;, &quot;RGS1&quot;, &quot;RGS2&quot;, &quot;RGS3&quot;, &quot;RP11-1143G9.4&quot;, &quot;RP11-160E2.6&quot;, &quot;RP11-53B5.1&quot;, &quot;RP11-620J15.3&quot;, &quot;RP5-1025A1.3&quot;, &quot;RP5-1171I10.5&quot;, &quot;RPS10&quot;, &quot;RPS10-NUDT3&quot;, &quot;RPS11&quot;, &quot;RPS12&quot;, &quot;RPS13&quot;, &quot;RPS14&quot;, &quot;RPS15&quot;, &quot;RPS15A&quot;, &quot;RPS16&quot;, &quot;RPS17&quot;, &quot;RPS18&quot;, &quot;RPS19&quot;, &quot;RPS19BP1&quot;, &quot;RPS2&quot;, &quot;RPS20&quot;, &quot;RPS21&quot;, &quot;RPS23&quot;, &quot;RPS24&quot;, &quot;RPS25&quot;, &quot;RPS26&quot;, &quot;RPS27&quot;, &quot;RPS27A&quot;, &quot;RPS27L&quot;, &quot;RPS28&quot;, &quot;RPS29&quot;, &quot;RPS3&quot;, &quot;RPS3A&quot;, &quot;RPS4X&quot;, &quot;RPS4Y1&quot;, &quot;RPS4Y2&quot;, &quot;RPS5&quot;, &quot;RPS6&quot;, &quot;RPS6KA1&quot;, &quot;RPS6KA2&quot;, &quot;RPS6KA2-AS1&quot;, &quot;RPS6KA3&quot;, &quot;RPS6KA4&quot;, &quot;RPS6KA5&quot;, &quot;RPS6KA6&quot;, &quot;RPS6KB1&quot;, &quot;RPS6KB2&quot;, &quot;RPS6KC1&quot;, &quot;RPS6KL1&quot;, &quot;RPS7&quot;, &quot;RPS8&quot;, &quot;RPS9&quot;, &quot;RPSA&quot;, &quot;RRM2&quot;, &quot;SMC4&quot;, &quot;SRGN&quot;, &quot;SRSF7&quot;, &quot;STMN1&quot;, &quot;TK1&quot;, &quot;TMSB4X&quot;, &quot;TOP2A&quot;, &quot;TPX2&quot;, &quot;TSC22D3&quot;, &quot;TUBA1A&quot;, &quot;TUBA1B&quot;, &quot;TUBB&quot;, &quot;TUBB4B&quot;, &quot;TXN&quot;, &quot;TYMS&quot;, &quot;UBA52&quot;, &quot;UBC&quot;, &quot;UBE2C&quot;, &quot;UHRF1&quot;, &quot;YBX1&quot;, &quot;YPEL5&quot;, &quot;ZFP36&quot;, &quot;ZWINT&quot; ] LATERAL_GENE_PATTERNS = [&quot;RP[LS].*&quot;] # Ribosomal # This will mark as &quot;lateral_gene&quot; any genes that match the above, if they exist in the clean dataset. mc.pl.mark_lateral_genes( ad, lateral_gene_names=LATERAL_GENE_NAMES, lateral_gene_patterns=LATERAL_GENE_PATTERNS, ) #&gt; set 3k_pbmc.clean.var[lateral_gene]: 225 true (1.358%) out of 16564 bools Some genes have higher variances than expected which could lead to false positive outlier identification. Users can mark those genes as noisy genes using the mc.pl.mark_noisy_genes() function. NOISY_GENE_NAMES = [ &quot;CCL3&quot;, &quot;CCL4&quot;, &quot;CCL5&quot;, &quot;CXCL8&quot;, &quot;DUSP1&quot;, &quot;FOS&quot;, &quot;G0S2&quot;, &quot;HBB&quot;, &quot;HIST1H4C&quot;, &quot;IER2&quot;, &quot;IGKC&quot;, &quot;IGLC2&quot;, &quot;JUN&quot;, &quot;JUNB&quot;, &quot;KLRB1&quot;, &quot;MT2A&quot;, &quot;RPS26&quot;, &quot;RPS4Y1&quot;, &quot;TRBC1&quot;, &quot;TUBA1B&quot;, &quot;TUBB&quot; ] # This will mark as &quot;noisy_gene&quot; any genes that match the above, if they exist in the clean dataset. mc.pl.mark_noisy_genes(ad, noisy_gene_names=NOISY_GENE_NAMES) #&gt; set 3k_pbmc.clean.var[noisy_gene]: 17 true (0.1026%) out of 16564 bools To extend this list of lateral genes, users can use the relate_to_lateral_genes function to identify genes that are highly correlated with the predefined lateral genes. The use of this function is described in the vignette from the MC2 authors. Define target_metacell_size (graining level) By default, MC2 will build metacells with a size of 96 cells per metacells. Users can vary the target_metacell_size parameter to reach a desired graining level. gamma = 25 target_metacell_size = gamma Metacells identification using the divide and conquer approach The construction of metacells by MC2 is performed using the mc.pl.divide_and_conquer_pipeline() function. Note that by default all cores of the system will be used for the metacells construction. To change this behavior and adapt the number of cores the MC2 authors propose to use the mc.pl.guess_max_parallel_piles() and mc.pl.set_max_parallel_piles() functions to adapt the number of processed in parallel depending on the available memory. The mc.pl.divide_and_conquer_pipeline() function associates each cell to a metacell or defines the cell as outlier. These assignments are found in the obs layer of the anndata object. max_parallel_piles = mc.pl.guess_max_parallel_piles(ad) mc.pl.set_max_parallel_piles(max_parallel_piles) mc.pl.divide_and_conquer_pipeline( ad, target_metacell_size = target_metacell_size, random_seed = 123456) #&gt; set 3k_pbmc.clean.var[selected_gene]: * -&gt; False #&gt; set 3k_pbmc.clean.var[rare_gene]: 0 true (0%) out of 16564 bools #&gt; set 3k_pbmc.clean.var[rare_gene_module]: 16564 int32 elements with all outliers (100%) #&gt; set 3k_pbmc.clean.obs[cells_rare_gene_module]: 2638 int32 elements with all outliers (100%) #&gt; set 3k_pbmc.clean.obs[rare_cell]: 0 true (0%) out of 2638 bools #&gt; set 3k_pbmc.clean.var[selected_gene]: 256 true (1.546%) out of 16564 bools #&gt; set 3k_pbmc.clean.obs[metacell]: 2638 int32s #&gt; set 3k_pbmc.clean.obs[dissolved]: 45 true (1.706%) out of 2638 bools #&gt; set 3k_pbmc.clean.obs[metacell_level]: 2638 int32s ad.obs.metacell.head #&gt; &lt;bound method NDFrame.head of index #&gt; AAACATACAACCAC-1 66 #&gt; AAACATTGAGCTAC-1 87 #&gt; AAACATTGATCAGC-1 84 #&gt; AAACCGTGCTTCCG-1 91 #&gt; AAACCGTGTATGCG-1 110 #&gt; ... #&gt; TTTCGAACTCTCAT-1 112 #&gt; TTTCTACTGAGGCA-1 74 #&gt; TTTCTACTTCCTCG-1 113 #&gt; TTTGCATGAGAGGC-1 57 #&gt; TTTGCATGCCTCAC-1 82 #&gt; Name: metacell, Length: 2638, dtype: int32&gt; The following code chunk adds a columns (named membership) containing the single_cell assignments to the obs attribute in the single-cell anndata object. The membership information is required to compute metacells quality metrics as shown in chapter 4. # make a membership -- index of metacells to which single cells belong to ad.obs[&#39;membership&#39;] = [int(i)+1 if i &gt;= 0 else np.nan for i in ad.obs.metacell] Retrieve aggregated metacell data The function mc.pl.collect_metacells() should be used to subsequently retrieve an anndata object containing the data at the metacells level instead of the single-cell level. This function will store in the X data matrix of the anndata object a matrix of gene fraction (i.e., the sum of all gene levels in a metacell sums to 1) and it will store the total UMIs per gene per metacell in the layer total_umis. mc_ad = mc.pl.collect_metacells(ad, name=&#39;metacells&#39;, random_seed = 123456) #&gt; set metacells.obs[grouped]: 122 int64s #&gt; set metacells.obs[total_umis]: 122 float64s #&gt; set metacells.layers[total_umis]: ndarray 122 X 16564 float32s #&gt; set metacells.obs[__zeros_downsample_umis]: 122 int64s #&gt; set metacells.layers[zeros]: ndarray 122 X 16564 int32s #&gt; set 3k_pbmc.clean.obs[metacell_name]: 2638 &lt;U8s #&gt; set metacells.var[gene_ids]: 16564 objects #&gt; set metacells.var[bursty_lonely_gene]: 0 true (0%) out of 16564 bools #&gt; set metacells.var[properly_sampled_gene]: 16564 true (100%) out of 16564 bools #&gt; set metacells.var[excluded_gene]: 0 true (0%) out of 16564 bools #&gt; set metacells.var[full_gene_index]: 16564 int32s #&gt; set metacells.var[lateral_gene]: 225 true (1.358%) out of 16564 bools #&gt; set metacells.var[noisy_gene]: 17 true (0.1026%) out of 16564 bools #&gt; set metacells.var[selected_gene]: 256 true (1.546%) out of 16564 bools #&gt; set metacells.var[rare_gene]: 0 true (0%) out of 16564 bools #&gt; set metacells.var[rare_gene_module]: 16564 int32s #&gt; set metacells.obs[metacells_rare_gene_module]: 122 int32s #&gt; set metacells.obs[rare_metacell]: 0 true (0%) out of 122 bools #&gt; set metacells.uns[outliers]: 161 #&gt; set metacells.uns[metacells_algorithm]: metacells.0.9.0 mc_ad.shape #&gt; (122, 16564) mc_ad.X.sum(axis=1)[:5] #&gt; matrix([[1. ], #&gt; [1. ], #&gt; [1. ], #&gt; [1. ], #&gt; [0.99999994]], dtype=float32) mc_ad.layers[&#39;total_umis&#39;] #&gt; array([[1., 0., 0., ..., 0., 0., 0.], #&gt; [0., 0., 0., ..., 0., 1., 0.], #&gt; [0., 0., 0., ..., 0., 0., 2.], #&gt; ..., #&gt; [0., 0., 0., ..., 0., 2., 3.], #&gt; [0., 0., 0., ..., 0., 0., 0.], #&gt; [1., 0., 0., ..., 0., 1., 0.]], dtype=float32) 3.2.5 Annotate metacells (using available annotations) If single-cell annotations are available in the original single-cell anndata object. We can transfer these annotations to the metacell anndata object using the mc.tl.convey_obs_to_group() function which will associate each metacell to the most frequent annotation (categorical) or averaged annotation (continuous) across the single-cells composing the metacell (use of the mc.ut.most_frequent and np.mean respectively in the mode paratemer). # Assign a single value for each metacell based on the cells. mc.tl.convey_obs_to_group( adata=ad, gdata=mc_ad, property_name=annotation_label, to_property_name=annotation_label, method=mc.ut.most_frequent # This is the default, for categorical data ) #&gt; set metacells.obs[louvain]: 122 &lt;U17s # Compute the fraction of cells with each possible value in each metacell: mc.tl.convey_obs_fractions_to_group( adata=ad, gdata=mc_ad, property_name=annotation_label, to_property_name=annotation_label ) #&gt; set metacells.obs[louvain_fraction_of_B cells]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_CD14+ Monocytes]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_CD4 T cells]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_CD8 T cells]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_Dendritic cells]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_FCGR3A+ Monocytes]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_Megakaryocytes]: 122 float64s #&gt; set metacells.obs[louvain_fraction_of_NK cells]: 122 float64s 3.2.6 Save output For future downstream analyses in python (section ??), we save the metacell counts in an Anndata object: ## Save single-cell metadata (i.e., `raw.obs` dataframe) in the metacell adata object mc_ad.uns = ad.uns.copy() mc_ad.uns[&#39;sc.obs&#39;] = ad.obs.copy() # save the requested gamma mc_ad.uns[&#39;gamma&#39;] = gamma # save metacell size mc_ad.obs.rename(columns={&#39;grouped&#39;:&#39;size&#39;}, inplace = True) print(&quot;Saving metacell object for the &quot;+ proj_name+ &quot; dataset using &quot;+ MC_tool) #&gt; Saving metacell object for the 3k_pbmc dataset using MC2 mc_ad.write_h5ad(os.path.join(&#39;./data&#39;, proj_name, f&#39;metacell_{MC_tool}.h5ad&#39;)) For future QCs and downstream analyses in R (section 5.1), we save the metacell counts in a Seurat object: library(Seurat) library(anndata) library(reticulate) adata_mc &lt;- read_h5ad(paste0(&quot;data/&quot;, py$proj_name, &quot;/metacell_MC2.h5ad&quot;)) # Save counts and metadata in a Seurat object countMatrix &lt;- Matrix::t(adata_mc$X) colnames(countMatrix) &lt;- adata_mc$obs_names rownames(countMatrix) &lt;- adata_mc$var_names MC.seurat &lt;- CreateSeuratObject(counts = as(countMatrix, &#39;CsparseMatrix&#39;), meta.data = as.data.frame(adata_mc$obs)) #&gt; Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes #&gt; (&#39;-&#39;) #&gt; Warning: Invalid name supplied, making object name syntactically valid. New #&gt; object name is #&gt; sizetotal_umisX__zeros_downsample_umismetacells_rare_gene_modulerare_metacelllouvainlouvain_fraction_of_B.cellslouvain_fraction_of_CD14..Monocyteslouvain_fraction_of_CD4.T.cellslouvain_fraction_of_CD8.T.cellslouvain_fraction_of_Dendritic.cellslouvain_fraction_of_FCGR3A..Monocyteslouvain_fraction_of_Megakaryocyteslouvain_fraction_of_NK.cells; #&gt; see ?make.names for more details on syntax validity MC.seurat@misc[[&quot;var_features&quot;]] &lt;- rownames(adata_mc$var)[which(adata_mc$var$selected_gene == T)] # Save membership in misc MC.seurat@misc$cell_membership &lt;- py$ad$obs[&#39;membership&#39;] saveRDS(MC.seurat, file = paste0(&#39;./data/&#39;, py$proj_name, &#39;/metacell_MC2.rds&#39;)) References "],["SEACells-construction.html", "3.3 SEACells (Python)", " 3.3 SEACells (Python) In this section, we construct metacells using SEACells. 3.3.1 Method The SEAcells method builds a single-cell kNN graph from the Euclidean distance in the principal component space (SVD for scATAC-seq) space. Distances in the graph are transformed to affinity by applying an adaptive Gaussian kernel. The affinity matrix is then decomposed into archetypes (linear combination of cells) and membership matrices (cells as a linear combination of archetypes). Single cells are assigned to a given metacell based on the maximum membership value of the corresponding archetype. The code provided in this section is adapted from the author’s jupyter notebook. For more information on the method, please refer to our review14 and the original paper.15 Importing python packages To run the SEACells, the following python packages need to be imported: import os import pandas as pd import scanpy as sc import SEACells import random If you don’t have these packages installed, please refer to the section 1.1. 3.3.2 Data loading Similarly to SuperCell and MC2, we will run SEACells on the single-cell dataset composed of around 3000 peripheral blood mononuclear cells (PBMCs). Please follow the section 1.2 to retrieve these data from the scanpy package and save the data in the following file: “data/3k_pbmc/singlecell_anndata_filtered.h5ad”. MC_tool = &quot;SEACells&quot; proj_name = &quot;3k_pbmc&quot; ad = sc.read(os.path.join(&quot;data&quot;, proj_name, &quot;singlecell_anndata_filtered.h5ad&quot;)) 3.3.3 Filtering steps In this tutorial, the data have been pre-filterd and SEACells does not perform additionnal filtering. 3.3.4 Building metacells Metacells construction using SEACells requires 2 main inputs: i) an anndata object (build_kernel_on parameter), and ii) a key indicating which matrix in the obsm attribute of the anndata object should be considered to compute the kernel needed for archetypal analysis (build_kernel_on parameter). Important optional inputs are: the number of metacells to identify (n_SEACells parameter), which is used as input of the archetypal analysis, ii) the number of neighbors to consider for the knn graph (n_neighbors parameter). Data pre-processing The following code chunk saves the raw counts of the filtered data in the raw attribute of the anndata object. The raw counts will be used later for metacells aggregation. raw_ad = sc.AnnData(ad.X) raw_ad.obs_names, raw_ad.var_names = ad.obs_names, ad.var_names ad.raw = raw_ad To build the kernel for archetypal analysis, SEACells requires a lower-dimensionnal embedding of the data (for example using PCA for scRNA-Seq data or SVD for scATAC-Seq data). In the next code chunk, we follow standard pre-processing steps prior to PCA computation, i.e., data normalization, log transformation, identification of highly variable genes. PCA components are saved in the obsm attribute of the anndata object. To pre-process the single-cell data, we are using standard pre-processing for single-cell RNA-seq data using Scanpy. For more information, see the Scanpy tutorial. # Normalize cells, log transform and compute highly variable genes sc.pp.normalize_per_cell(ad, 10000) sc.pp.log1p(ad) sc.pp.highly_variable_genes(ad, n_top_genes=2000) # Compute principal components - n_comp = 30 sc.tl.pca(ad, n_comps=n_comp, use_highly_variable=True) # Compute UMAP for visualization # Here we use 30 components to be consistent with our main tutorial, but fill free to explore other number of principal components to use sc.pp.neighbors(ad, n_neighbors=15, n_pcs=30) sc.tl.umap(ad) Setting up SEACells parameters In this tutorial, we will use in the SEACells model the 30 first principal components resulting from the PCA to build the knn graph which will be used to compute the kernel. The number of neighbors to considered for the knn graph can be fixed using the n_neighbors parameter (here 15). As mentioned previously, users should provide as input the number of metacells required (n_SEACells parameter). This number can be defined as the ratio between the number of single cells and the desired graining level (gamma parameter in the following code chunk). In this example, we choose a graining level of 25. build_kernel_on = &#39;X_pca&#39; # key in ad.obsm to use for computing metacells n_waypoint_eigs = 10 # Number of eigenvalues to consider when initializing metacells n_neighbors = 15 # Number of neighbors used for graph construction gamma = 25 # the requested graining level n_SEACells = int(ad.shape[0]/gamma) # the requested number of metacells Initializing the SEACells model The SEACells model is initialized with the previously defined parameters using the SEACells.core.SEACells function. model = SEACells.core.SEACells(ad, build_kernel_on = build_kernel_on, n_SEACells = n_SEACells, n_waypoint_eigs = n_waypoint_eigs, n_neighbors = n_neighbors, convergence_epsilon = 1e-5, verbose = True) #&gt; Welcome to SEACells! Kernel computation is performed using the mconstruct_kernel_matrix function. model.construct_kernel_matrix() M = model.kernel_matrix Metacells are initialized using the initialize_archetypes function. The SEACells archetypes initialization is based on cells sampling and thus is stochastic. User can fix a seed for reproducible results. To check that the archetypes are evenly spread, users can visualize them using the plot.plot_initialization function. # set seed for reproducibility random.seed(123) # Initialize archetypes model.initialize_archetypes() #&gt; Building kernel on X_pca #&gt; Computing diffusion components from X_pca for waypoint initialization ... #&gt; Done. #&gt; Sampling waypoints ... #&gt; Done. #&gt; Selecting 88 cells from waypoint initialization. #&gt; Initializing residual matrix using greedy column selection #&gt; Initializing f and g... #&gt; Selecting 17 cells from greedy initialization. #&gt; #&gt; 0%| | 0/27 [00:00&lt;?, ?it/s] 100%|##########| 27/27 [00:00&lt;00:00, 320.79it/s] # Visualize the initialization SEACells.plot.plot_initialization(ad, model, plot_basis=&#39;X_umap&#39;) Fitting the SEACells model to identify metacells The identification of the archetypes is an iterative process. In this example, we fixed the minimum and maximum number of iteration to 10 and 50 respectively. We then check the model convergence using the plot_convergence function. model.fit(min_iter = 10, max_iter = 50) #&gt; Randomly initialized A matrix. #&gt; Setting convergence threshold at 0.00088 #&gt; Starting iteration 1. #&gt; Completed iteration 1. #&gt; Starting iteration 10. #&gt; Completed iteration 10. #&gt; Starting iteration 20. #&gt; Completed iteration 20. #&gt; Starting iteration 30. #&gt; Completed iteration 30. #&gt; Starting iteration 40. #&gt; Completed iteration 40. #&gt; Converged after 46 iterations. model.plot_convergence() Once the final archetypes have been identified, we can assign each single-cell to one metacell (hard assignments). These assignments (membership) can be retrieved using the get_hard_assignments function or extracted from the anndata object using ad.obs[\"SEACell\"]. In this tutorial, we will only consider hard assignments. However, the SEACells package also provides the option to retrieve soft assignments (multiple weighted assignments for each cell) using the get_soft_assignments function. For more details on the soft assignments, please refer to the SEACell paper and the original author’s jupyter notebook. membership = model.get_hard_assignments() membership.head #&gt; &lt;bound method NDFrame.head of SEACell #&gt; index #&gt; AAACATACAACCAC-1 SEACell-35 #&gt; AAACATTGAGCTAC-1 SEACell-69 #&gt; AAACATTGATCAGC-1 SEACell-0 #&gt; AAACCGTGCTTCCG-1 SEACell-24 #&gt; AAACCGTGTATGCG-1 SEACell-57 #&gt; ... ... #&gt; TTTCGAACTCTCAT-1 SEACell-1 #&gt; TTTCTACTGAGGCA-1 SEACell-101 #&gt; TTTCTACTTCCTCG-1 SEACell-30 #&gt; TTTGCATGAGAGGC-1 SEACell-40 #&gt; TTTGCATGCCTCAC-1 SEACell-42 #&gt; #&gt; [2638 rows x 1 columns]&gt; ad.obs[&quot;SEACell&quot;].head #&gt; &lt;bound method NDFrame.head of index #&gt; AAACATACAACCAC-1 SEACell-35 #&gt; AAACATTGAGCTAC-1 SEACell-69 #&gt; AAACATTGATCAGC-1 SEACell-0 #&gt; AAACCGTGCTTCCG-1 SEACell-24 #&gt; AAACCGTGTATGCG-1 SEACell-57 #&gt; ... #&gt; TTTCGAACTCTCAT-1 SEACell-1 #&gt; TTTCTACTGAGGCA-1 SEACell-101 #&gt; TTTCTACTTCCTCG-1 SEACell-30 #&gt; TTTGCATGAGAGGC-1 SEACell-40 #&gt; TTTGCATGCCTCAC-1 SEACell-42 #&gt; Name: SEACell, Length: 2638, dtype: object&gt; Retrieve aggregated metacell data The core.summarize_by_SEACell function can be used to generate a metacell count matrix (aggregation of counts across all cells belonging to each metacell). mc_ad = SEACells.core.summarize_by_SEACell(ad, SEACells_label=&#39;SEACell&#39;, summarize_layer=&#39;raw&#39;, celltype_label=annotation_label) #&gt; 0%| | 0/105 [00:00&lt;?, ?it/s] 56%|#####6 | 59/105 [00:00&lt;00:00, 587.31it/s] 100%|##########| 105/105 [00:00&lt;00:00, 606.52it/s] Annotate metacells Note that providing an annotation to the celltype_label parameter in the SEACells.core.summarize_by_SEACell function allowed us to annotate the metacells to the most common cell type in each metacell. 3.3.5 Visualize metacells To visualize the metacells, we can project the metacells on the single-cell UMAP representation using the plot.plot_2D included in the SEACells package. SEACells.plot.plot_2D(ad, key=&#39;X_umap&#39;, colour_metacells=True) Save output For future downstream analyses in python (section ??), we save the metacell counts in an Anndata object: print(&quot;Saving metacell object for the &quot;+ proj_name+ &quot; dataset using &quot;+ MC_tool) #&gt; Saving metacell object for the 3k_pbmc dataset using SEACells # Save metacell sizes label_df = ad.obs[[&#39;SEACell&#39;]].reset_index() mc_ad.obs = mc_ad.obs.join(pd.DataFrame(label_df.groupby(&#39;SEACell&#39;).count().iloc[:, 0]).rename(columns={&#39;index&#39;:&#39;size&#39;})) # save pca used to compute metacells mc_ad.uns[&#39;var_features&#39;]=ad.var_names[ad.var.highly_variable].tolist() mc_ad.uns[&#39;sc.pca&#39;]=ad.obsm[&#39;X_pca&#39;] mc_ad.uns[&#39;sc.umap&#39;]=ad.obsm[&#39;X_umap&#39;] mc_ad.write_h5ad(os.path.join(&#39;./data&#39;, proj_name, f&#39;metacell_{MC_tool}.h5ad&#39;)) For future downstream analyses in R (section 5.1), we save the metacell counts in a Seurat object: library(Seurat) library(anndata) library(reticulate) adata_mc &lt;- read_h5ad(paste0(&quot;data/&quot;, py$proj_name, &quot;/metacell_SEACells.h5ad&quot;)) # Save counts and metadata in a Seurat object countMatrix &lt;- Matrix::t(adata_mc$X) colnames(countMatrix) &lt;- adata_mc$obs_names rownames(countMatrix) &lt;- adata_mc$var_names MC.seurat &lt;- CreateSeuratObject(counts = as(countMatrix, &#39;CsparseMatrix&#39;), meta.data = as.data.frame(adata_mc$obs)) #&gt; Warning: Feature names cannot have underscores (&#39;_&#39;), replacing with dashes #&gt; (&#39;-&#39;) # MC.seurat@misc[[&quot;sc.pca&quot;]] &lt;- adata_mc$uns$sc.pca # MC.seurat@misc[[&quot;sc.umap&quot;]] &lt;- adata_mc$uns$sc.umap MC.seurat@misc[[&quot;var_features&quot;]] &lt;- adata_mc$uns$var_features pca.res &lt;- adata_mc$uns$sc.pca rownames(pca.res) &lt;- rownames(py$ad$obs) MC.seurat@misc$sc.pca &lt;- CreateDimReducObject( embeddings = pca.res, key = &quot;PC_&quot;, assay = &quot;RNA&quot; ) #&gt; Warning: No columnames present in cell embeddings, setting to &#39;PC_1:30&#39; # Save membership in misc MC.seurat@misc$cell_membership &lt;- data.frame(row.names = rownames(py$membership), membership = py$membership$SEACell) saveRDS(MC.seurat, file = paste0(&#39;./data/&#39;, py$proj_name, &#39;/metacell_SEACells.rds&#39;)) References "],["command-line.html", "3.4 Metacell Analysis Toolkit (MCAT)", " 3.4 Metacell Analysis Toolkit (MCAT) We provide a command line tool allowing users to build metacells using either tool (MC2, SuperCell or SEACells) from a provided dataset. The command line tool takes multiple parameters as input, e.g., number of neighbors considered in the knn, number of components used, graining level. which is for example required in a benchmark setting. setwd(&quot;MetacellToolkit/&quot;) proj_name=&quot;3k_pbmc&quot; MC_tool=&quot;SuperCell&quot; # input raw adata output adata Rscript cli/${MC_tool}CL.R -i data/${proj_name}/singlecell_anndata_filtered.h5ad -o data/${proj_name}/${MC_tool}/ -n 50 -f 2000 -k 30 -g 50 -s adata # input raw adata output seurat Rscript cli/${MC_tool}CL.R -i data/${proj_name}/singlecell_anndata_filtered.h5ad -o data/${proj_name}/${MC_tool}/ -n 50 -f 2000 -k 30 -g 50 -s seurat proj_name=&quot;3k_pbmc&quot; MC_tool=&quot;SEACells&quot; # input raw adata output adata Rscript cli/${MC_tool}CL.R -i data/${proj_name}/singlecell_anndata_filtered.h5ad -o data/${proj_name}/${MC_tool}/ -n 50 -f 2000 -k 30 -g 50 -s adata # input raw adata output seurat Rscript cli/${MC_tool}CL.R -i data/${proj_name}/singlecell_anndata_filtered.h5ad -o data/${proj_name}/${MC_tool}/ -n 50 -f 2000 -k 30 -g 50 -s seurat "],["QCs.html", "Chapter 4 Metacells QCs", " Chapter 4 Metacells QCs Different metrics have been proposed in previous metacell studies to evaluate the quality of metacells. We propose a R package called MetacellToolkit, to compute and visualize these metrics. The package also provides a function to visualize metacells projected in the single-cell space. Import packages: # if(system.file(package=&#39;MetacellToolkit&#39;) == &quot;&quot;){ # remotes::install_github(&quot;GfellerLab/MetacellAnalysisToolkit@dev_ag&quot;, force = TRUE, upgrade = FALSE) # } library(MetacellAnalysisToolkit) library(Seurat) To explore metacells QCs, we need to load: (i) the single-cell data used to build the metacells and (ii) the metacell data saved in a Seurat object (see chapter 3). # Load the single-cell data sc_data = readRDS(paste0(&quot;data/&quot;, proj_name, &quot;/singlecell_seurat_filtered.rds&quot;)) # Load the metacell data mc_data = readRDS(paste0(&#39;data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.rds&#39;)) "],["quantitative-metrics.html", "4.1 Quantitative metrics", " 4.1 Quantitative metrics 4.1.1 Purity When available, cell annotations can be used to annotate each metacell to the most abundant cell category (e.g. cell type) composing the metacell (see chapter 3). This also allows us to compute metacell purity. If the annotation considered is the cell type, the purity of a metacell is the proportion of the most abundant cell type within the metacell.16 mc_data$purity &lt;- mc_purity(membership = mc_data@misc$cell_membership$membership, annotation = sc_data@meta.data[, annotation_label]) qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;purity&quot;) qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;purity&quot;, split.by = annotation_label) 4.1.2 Compactness The compactness of a metacell is the variance of the components within the metacell.17 The lower the compactness value the better. This metric as well as the separation metric are computed based on a low embedding of the single-cell data (e.g., PCA). Note that it is important to use the embedding used initially to construc the metacells. In the next chunk, we retrieve the principal components computed for metacell construction (in chapter 3 these principal components were saved in the Seurat objects containing the metacell data) and run UMAP for visualization. sc_data@reductions[[&quot;pca&quot;]] &lt;- mc_data@misc$sc.pca sc_data &lt;- RunUMAP(sc_data, reduction = &quot;pca&quot;, dims = c(1:30), n.neighbors = 15, verbose = F, min.dist = 0.5) #&gt; Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #&gt; To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; #&gt; This message will be shown once per session UMAPPlot(sc_data, group.by = annotation_label, reduction = &quot;umap&quot;) membership_df &lt;- mc_data@misc$cell_membership mc_data$compactness &lt;- mc_compactness(cell.membership = membership_df, sc.obj = sc_data, sc.reduction = &quot;pca&quot;, n.components = 30, diffusion.components = T) #&gt; Computing compactness ... qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;compactness&quot;) #&gt; Warning: Removed 15 rows containing non-finite values (`stat_boxplot()`). qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;compactness&quot;, split.by = annotation_label) #&gt; Warning: Removed 15 rows containing non-finite values (`stat_boxplot()`). 4.1.3 Separation The separation of a metacell is the distance to the closest metacell.18 The higher the separation value the better. mc_data$separation &lt;- mc_separation(cell.membership = membership_df, sc.obj = sc_data, sc.reduction = &quot;pca&quot;, diffusion.components = T) #&gt; Computing separation ... qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;separation&quot;) qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;separation&quot;, split.by = annotation_label) Note that compactness and separation metrics are correlated, better compactness results in worse separation and vice versa. Metacells from dense regions will have better compactness but worse separation, while metacells from sparse regions will have better separation but worse compactness. library(ggplot2) ggplot(data.frame(compactness = log(mc_data$compactness), separation = log(mc_data$separation)), aes(x=compactness, y=separation)) + geom_point()+ geom_smooth(method=lm) + ggpubr::stat_cor(method = &quot;spearman&quot;) #&gt; `geom_smooth()` using formula = &#39;y ~ x&#39; #&gt; Warning: Removed 15 rows containing non-finite values (`stat_smooth()`). #&gt; Warning: Removed 15 rows containing non-finite values (`stat_cor()`). #&gt; Warning: Removed 15 rows containing missing values (`geom_point()`). 4.1.4 INV The inner normalized variance (INV) of a metacell is the mean-normalized variance of gene expression within the metacell.19 The lower the INV value the better. Note that it is the only metric that is latent-space independent. mc_data$INV &lt;- mc_INV(cell.membership = membership_df, sc.obj = sc_data, group.label = &quot;membership&quot;) #&gt; Counts and data slots are identical. #&gt; Normalizing data ... #&gt; Computing INV ... qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;INV&quot;) #&gt; Warning: Removed 15 rows containing non-finite values (`stat_boxplot()`). qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;INV&quot;, split.by = annotation_label) #&gt; Warning: Removed 15 rows containing non-finite values (`stat_boxplot()`). References "],["size-distribution.html", "4.2 Size distribution", " 4.2 Size distribution The size of a metacell corresponds to the number of single cells it contains. Having a homogeneous metacell size distribution is ideal for downstream analyses, since larger metacells will express more genes, which could confound analyses. When heterogeneous size distributions are obtained we recommend weighted downstream analyses as described in section 5.2. # Seurat::VlnPlot(mc_data, features = &quot;size&quot;, pt.size = 2) # Seurat::VlnPlot(mc_data, features = &quot;size&quot;, pt.size = 2, group.by = annotation_label) hist(mc_data$size, main = &quot;Size distribution&quot;, xlab = &quot;Size&quot;) qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;size&quot;) qc_boxplot(mc.obj = mc_data, qc.metrics = &quot;size&quot;, split.by = annotation_label) "],["representativeness-of-metacells.html", "4.3 Representativeness of metacells", " 4.3 Representativeness of metacells To visualize the metacells, we can project the metacells on the single-cell UMAP representation using the mc_projection() function (adapted from the plot.plot_2D() from the SEACells package). A good metacell partition should reproduce the overall structure of the single-cell data by uniformly representing the latent space. To use this function we need the data at the single-cell level (or at least an low-dimensional embedding of the data) and the single-cell membership to each the metacell. mc_projection( sc.obj = sc_data, mc.obj = mc_data, cell.membership = membership_df, sc.reduction = &quot;umap&quot;, sc.label = unlist(annotation_label), # single cells will be colored according the sc.label metacell.label = unlist(annotation_label) # metacells cell will be colored according the metacell.label ) By default the size of the metacells dots is proportionnal to the size of the metacells. Metacells can also be colored by a continuous variable such as one of the QC metrics computed in the previous chunks: mc_projection( sc.obj = sc_data, mc.obj = mc_data, cell.membership = membership_df, sc.reduction = &quot;umap&quot;, sc.label = unlist(annotation_label), # single cells will be colored according the sc.label continuous_metric = TRUE, metric = &quot;compactness&quot; ) "],["downstream-analysis-of-metacells.html", "Chapter 5 Downstream analysis of metacells", " Chapter 5 Downstream analysis of metacells In this chapter, we run standard and advanced downstream analyses on metacells instead of single-cell data. In this analysis, we treat each metacell as a single cell, neglecting information about the size of the metacell (i.e., number of containing single cells). If you are interested in sample-weighted analysis, where metacell size is taken into account, see section 5.2. "],["standard-analysis-R.html", "5.1 Standard analysis (R)", " 5.1 Standard analysis (R) In this tutorial, standard analyses include dimensionality reduction, clustering and differential expression using the Seurat framework. library(Seurat) #&gt; The legacy packages maptools, rgdal, and rgeos, underpinning this package #&gt; will retire shortly. Please refer to R-spatial evolution reports on #&gt; https://r-spatial.org/r/2023/05/15/evolution4.html for details. #&gt; This package is now running under evolution status 0 #&gt; Attaching SeuratObject library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union library(ggplot2) 5.1.1 Load metacell Seurat object We will use Seurat objects containing the metacells counts data and their annotation (e.g. cell-type annotation) and proceed with standard Seurat downstream analyses. Seurat objects containing metacells counts data and their annotation were generated at the end of sections 3.1 These objects can also be generated using the command line described in chapter 3.4 MC_tool = &quot;SuperCell&quot; proj_name = &quot;3k_pbmc&quot; annotation_column = &quot;louvain&quot; celltype_colors &lt;- c( &quot;CD14+ Monocytes&quot; = &quot;#E69F00&quot;, # orange &quot;B cells&quot; = &quot;#56B4E9&quot;, # sky blue &quot;CD4 T cells&quot; = &quot;#009E73&quot;, # bluish green &quot;NK cells&quot; = &quot;#F0E442&quot;, # yellow &quot;CD8 T cells&quot; = &quot;#0072B2&quot;, # blue &quot;FCGR3A+ Monocytes&quot; = &quot;#D55E00&quot;, # vermillion &quot;Dendritic cells&quot; = &quot;#CC79A7&quot;, # reddish purple &quot;Megakaryocytes&quot; = &quot;#000000&quot; # black ) MC.seurat = readRDS(paste0(&#39;./data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.rds&#39;)) 5.1.2 Dimensionality reduction As for single-cells, we normalize the raw counts (here aggregated raw counts) and we identify the most variable features in the metacells gene expression data. Based on these features, we run PCA and use the first principal components to obtain a two dimensionnal representation of the data using UMAP. Idents(MC.seurat) &lt;- annotation_column MC.seurat &lt;- NormalizeData(MC.seurat) MC.seurat &lt;- FindVariableFeatures(MC.seurat, selection.method = &quot;vst&quot;, nfeatures = 2000) MC.seurat &lt;- ScaleData(MC.seurat) #&gt; Centering and scaling data matrix MC.seurat &lt;- RunPCA(MC.seurat, verbose = F) MC.seurat &lt;- RunUMAP(MC.seurat, dims = 1:30, verbose = F) #&gt; Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #&gt; To use Python UMAP via reticulate, set umap.method to &#39;umap-learn&#39; and metric to &#39;correlation&#39; #&gt; This message will be shown once per session DimPlot(MC.seurat, reduction = &quot;umap&quot;, cols = celltype_colors) 5.1.3 Clustering We cluster the metacells using Seurat clustering steps and visualize these clusters using UMAP: MC.seurat$SCclustering &lt;- SuperCell::supercell_cluster(D = dist(MC.seurat@reductions$pca@cell.embeddings[, 1:30] ), k = 8)$clustering DimPlot(MC.seurat, reduction = &quot;umap&quot;, group.by = &quot;SCclustering&quot;) 5.1.4 Differential expression analysis We perform diffrential analysis to identify the markers of our cluster 3 as an example using the FindMarkers function. # Set idents to metacell annotation Idents(MC.seurat) &lt;- &quot;SCclustering&quot; cells_markers &lt;- FindMarkers(MC.seurat, ident.1 = &quot;3&quot;, only.pos = TRUE) #&gt; For a more efficient implementation of the Wilcoxon Rank Sum Test, #&gt; (default method for FindMarkers) please install the limma package #&gt; -------------------------------------------- #&gt; install.packages(&#39;BiocManager&#39;) #&gt; BiocManager::install(&#39;limma&#39;) #&gt; -------------------------------------------- #&gt; After installation of limma, Seurat will automatically use the more #&gt; efficient implementation (no further action necessary). #&gt; This message will be shown once per session head(cells_markers) #&gt; p_val avg_log2FC pct.1 pct.2 p_val_adj #&gt; MAL 8.809188e-37 1.3500224 0.901 0.135 2.883952e-32 #&gt; LINC00176 2.108003e-32 0.6485374 0.761 0.052 6.901180e-28 #&gt; LDHB 2.660113e-31 1.5689705 1.000 0.917 8.708679e-27 #&gt; AQP3 4.074471e-31 1.1640126 0.958 0.223 1.333900e-26 #&gt; LEF1 4.324853e-31 1.1439136 0.972 0.290 1.415870e-26 #&gt; RP11-664D1.1 1.511704e-30 0.6122634 0.789 0.067 4.949016e-26 We see that the top marker genes for this cluster contain Killer cell immunoglobulin-like receptors (KIRs) genes coding for transmembrane glycoproteins expressed by natural killer cells. genes = c(&quot;KIR3DL2&quot;, &quot;KIR3DL1&quot;) VlnPlot(MC.seurat, genes, ncol = 2, pt.size = 0.0) We can verify the identification of the NK cell cluster by comparing the metacell annotation and the metacell clustering. p_cluster &lt;- DimPlot(MC.seurat, group.by = &quot;SCclustering&quot;) p_annot &lt;- DimPlot(MC.seurat, group.by = annotation_column, cols = celltype_colors) p_cluster + p_annot 5.1.5 Visualize gene-gene correlation We can use the supercell_GeneGenePlot function from the SuperCell package to visualize the correlation between marker genes of a cell-type: (i) at the single-cell level and (ii) at the metacell level. For that, we load the single-cell data from which the metacells were derived from. print(proj_name) #&gt; [1] &quot;3k_pbmc&quot; sc_data &lt;- readRDS(paste0(&quot;data/&quot;, proj_name, &quot;/singlecell_seurat_filtered.rds&quot;)) sc_data &lt;- NormalizeData(sc_data, normalization.method = &quot;LogNormalize&quot;) We visualize gene-gene correlation at the single-cell level: cells_markers &lt;- cells_markers [order(cells_markers$avg_log2FC, decreasing = T),] gene_x &lt;- rownames(cells_markers)[1:5] gene_y &lt;- rownames(cells_markers)[6:10] alpha &lt;- 0.7 p.sc &lt;- SuperCell::supercell_GeneGenePlot( GetAssayData(sc_data, slot = &quot;data&quot;), gene_x = gene_x, gene_y = gene_y, clusters = sc_data@meta.data[, annotation_column], sort.by.corr = F, alpha = alpha, color.use = celltype_colors ) p.sc$p We visualize gene-gene correlation at the metacell level: p.MC &lt;- SuperCell::supercell_GeneGenePlot(GetAssayData(MC.seurat, slot = &quot;data&quot;), gene_x = gene_x, gene_y = gene_y, clusters = MC.seurat@meta.data[, annotation_column], sort.by.corr = F, supercell_size = MC.seurat$size, alpha = alpha, color.use = celltype_colors) p.MC$p "],["weighted-analysis.html", "5.2 Sample-weighted analysis", " 5.2 Sample-weighted analysis library(Seurat) library(dplyr) library(ggplot2) library(SuperCell) 5.2.1 Load metacell Seurat object We will use Seurat objects containing the metacells counts data and their annotation (e.g. and cell-type annotation) and proceed with downstream analyses considering the size of each metacells. Seurat objects containing metacells counts data and their annotation were generated at the end of sections 3.1 These objects can also be generated using the command line described in chapter 3.4 MC_tool = &quot;SuperCell&quot; proj_name = &quot;3k_pbmc&quot; annotation_column = &quot;louvain&quot; celltype_colors &lt;- c( &quot;CD14+ Monocytes&quot; = &quot;#E69F00&quot;, # orange &quot;B cells&quot; = &quot;#56B4E9&quot;, # sky blue &quot;CD4 T cells&quot; = &quot;#009E73&quot;, # bluish green &quot;NK cells&quot; = &quot;#F0E442&quot;, # yellow &quot;CD8 T cells&quot; = &quot;#0072B2&quot;, # blue &quot;FCGR3A+ Monocytes&quot; = &quot;#D55E00&quot;, # vermillion &quot;Dendritic cells&quot; = &quot;#CC79A7&quot;, # reddish purple &quot;Megakaryocytes&quot; = &quot;#000000&quot; # black ) MC.seurat = readRDS(paste0(&#39;./data/&#39;, proj_name, &#39;/metacell_&#39;, MC_tool,&#39;.rds&#39;)) 5.2.2 Dimensionality reduction As for single-cells, we normalize the raw counts (here aggregated raw counts) and we identify the most variable features in the metacells gene expression data. Based on these features, we run a sample weighted PCA using the function supercell_prcomp from the SuperCell R package and use the first principal components to obtain a two dimensionnal representation of the data using UMAP. Using the supercell_DimPlot function from the the SuperCell R package we can visualize the metacells and their sized in UMAP space. MC.seurat &lt;- NormalizeData(MC.seurat, normalization.method = &quot;LogNormalize&quot;) MC_list &lt;- list(N.SC = ncol(MC.seurat), supercell_size = MC.seurat$size) MC_list$PCA &lt;- SuperCell::supercell_prcomp( Matrix::t(GetAssayData(MC.seurat, slot = &quot;data&quot;)), genes.use = MC.seurat@misc$var_features, # or a new set of HVG can be computed supercell_size = MC_list$supercell_size, # provide this parameter to run sample-weighted version of PCA, k = 30 ) MC_list$UMAP &lt;- supercell_UMAP( SC = MC_list, PCA_name = &quot;PCA&quot;, n.comp = 30, n_neighbors = 15 ) supercell_DimPlot(SC = MC_list, groups = MC.seurat@meta.data[, annotation_column], dim.name = &quot;UMAP&quot;, title = paste0(&quot;UMAP of metacells colored by cell type assignment&quot;), color.use = celltype_colors ) 5.2.3 Clustering We cluster the metacells using the function supercell_cluster from SuperCell R package to perform the clustering step and visualize these clusters in the UMAP space: # compute distance among metacells D &lt;- dist(MC_list$PCA$x) # cluster metacells MC_list$SCclustering &lt;- supercell_cluster(D = D, k = 8, supercell_size = MC_list$supercell_size) MC.seurat$SCclustering &lt;- MC_list$SCclustering$clustering # Plot clustering result supercell_DimPlot( MC_list, groups = factor(MC_list$SCclustering$clustering), dim.name = &quot;UMAP&quot;, title = paste0(&quot;UMAP of metacells colored by metacell clustering&quot;) ) 5.2.4 Differential expression analysis We perform diffrential analysis to identify the markers of our clusters using the supercell_FindAllMarkers function from the SuperCell package. # Compute upregulated genes in each cell line (versus other cells) MC.all.markers &lt;- supercell_FindAllMarkers( ge = GetAssayData(MC.seurat, slot = &quot;data&quot;), clusters = MC_list$SCclustering$clustering, supercell_size = MC_list$supercell_size, only.pos = TRUE, min.pct = 0, logfc.threshold = 0.2 ) We select the markers for cluster 4: cluster4_markers &lt;- MC.all.markers[[4]] MC.top.markers &lt;- cluster4_markers[order(cluster4_markers$logFC, decreasing = T),] We visualize the top 5 markers for the cluster 4 and see that the top marker genes for this cluster contain marker genes of natural killer cells such as GZMB and GNLY. Idents(MC.seurat) &lt;- &quot;SCclustering&quot; # genes.to.plot &lt;- MC.seurat.top.markers$gene[MC.seurat.top.markers$cluster == unique(MC.seurat@meta.data[,annotation_column])[1]] # genes.to.plot &lt;- MC.top.markers$gene[c(seq(1, 20, 5))] genes.to.plot &lt;- rownames(MC.top.markers)[1:5] VlnPlot(MC.seurat, features = genes.to.plot, ncol = 5, pt.size = 0.0) #&gt; Warning: Groups with fewer than two data points have been dropped. #&gt; Groups with fewer than two data points have been dropped. #&gt; Groups with fewer than two data points have been dropped. #&gt; Groups with fewer than two data points have been dropped. #&gt; Groups with fewer than two data points have been dropped. "],["integration.html", "Chapter 6 Integration of metacells ", " Chapter 6 Integration of metacells "],["integration_unsupervised.html", "6.1 Unsupervised integration", " 6.1 Unsupervised integration In this section, we will work with the Human Cell Lung Atlas core HLCA gathering around 580,000 cells from 107 individuals distributed in 166 samples. The aim of this tutorial is to show how you can use metacells to analyze a very large dataset using a reasonable amount of time and memory. For this we will use here SuperCell via the MCAT command line tool. 6.1.1 Data loading Please follow the section 1.4 to retrieve the HLCA atlas, divide the atlas by dataset and save the splitted data in the following folder: “data/HLCA/”. 6.1.2 Setting up the environment First we need to specify that we will work with the MetacellAnalysisToolkit conda environment (needed for anndata relying on reticulate and the MCAT tool). To build the conda environment please follow the instructions on our MetacellAnalysisToolkit github repository. library(reticulate) conda_env &lt;- conda_list()[reticulate::conda_list()$name == &quot;MetacellAnalysisToolkit&quot;,&quot;python&quot;] use_condaenv(conda_env) library(Seurat) #&gt; The legacy packages maptools, rgdal, and rgeos, underpinning this package #&gt; will retire shortly. Please refer to R-spatial evolution reports on #&gt; https://r-spatial.org/r/2023/05/15/evolution4.html for details. #&gt; This package is now running under evolution status 0 #&gt; Attaching SeuratObject library(anndata) library(SuperCell) library(ggplot2) color.celltypes &lt;- c(&#39;#E5D2DD&#39;, &#39;#53A85F&#39;, &#39;#F1BB72&#39;, &#39;#F3B1A0&#39;, &#39;#D6E7A3&#39;, &#39;#57C3F3&#39;, &#39;#476D87&#39;, &#39;#E95C59&#39;, &#39;#E59CC4&#39;, &#39;#AB3282&#39;, &#39;#23452F&#39;, &#39;#BD956A&#39;, &#39;#8C549C&#39;, &#39;#585658&#39;, &#39;#9FA3A8&#39;, &#39;#E0D4CA&#39;, &#39;#5F3D69&#39;, &#39;#58A4C3&#39;, &quot;#b20000&quot;,&#39;#E4C755&#39;, &#39;#F7F398&#39;, &#39;#AA9A59&#39;, &#39;#E63863&#39;, &#39;#E39A35&#39;, &#39;#C1E6F3&#39;, &#39;#6778AE&#39;, &#39;#91D0BE&#39;, &#39;#B53E2B&#39;, &#39;#712820&#39;, &#39;#DCC1DD&#39;, &#39;#CCE0F5&#39;, &#39;#CCC9E6&#39;, &#39;#625D9E&#39;, &#39;#68A180&#39;, &#39;#3A6963&#39;, &#39;#968175&#39;) 6.1.3 Building metacell We build metacells with the MCAT command line using SuperCell (-t SuperCell). To facilitate downstream analysis of the donors we build metacells for each sample in each dataset (-a sample). Here we will use 2000 highly variable genes (-f 2000) to compute the PCA from which we used 50 principal components (-m 50) to build a k = 30 (-k 30) nearest neighbor graph on which the metacells are identified using a graining level of 50 (-g 50). We use an adata .h5ad output format (-s adata) as it is faster to write and lighter to store than a Seurat .rds object. This step takes around 20 min with multiple cores (-l 6). Be aware that parallel processing requires more memory (32 GB of memory required for 6 cores). If you are limited in memory you should still be able to process the samples by reducing the number of cores (e.g. -l 3) or by sequentially processing the samples (just remove the -l) in a slightly longer time. start=`date +%s` for d in data/HLCA/datasets/*; do cli/MCAT -t SuperCell -i $d/sc_adata.h5ad -o $d -a sample -l 3 -n 50 -f 2000 -k 30 -g 50 -s adata done echo &quot;Duration: $((($(date +%s)-$start)/60)) minutes&quot; 6.1.4 Loading metacell objects We load the .h5ad objects and directly convert them in Seurat objects to benefit from all the functions of this framework. datasets &lt;- list.dirs(&quot;data/HLCA/datasets/&quot;, full.names = F, recursive = F) metacell.files &lt;- sapply(datasets[1:5] , FUN = function(x){paste0(&quot;data/HLCA/datasets/&quot;,x,&quot;/mc_adata.h5ad&quot;)}) metacell.objs &lt;- lapply(X = metacell.files, function(X){ adata &lt;- read_h5ad(X) countMatrix &lt;- Matrix::t(adata$X) colnames(countMatrix) &lt;- adata$obs_names rownames(countMatrix) &lt;- adata$var_names sobj &lt;- Seurat::CreateSeuratObject(counts = countMatrix,meta.data = adata$obs) sobj &lt;- RenameCells(sobj, add.cell.id = unique(sobj$sample)) # we give unique name to metacells return(sobj) }) 6.1.5 Merging objects and basic quality control Given the single-cell metadata, the MCAT tool automatically assigns annotations to metacells and computes purities for all the categorical variables present in the metadata of the input single-cell object. Thus, we can check the purity of our metacells at different levels of annotations, as well as their size (number of single cells they contain). To do so we merge the object together and use the Seurat VlnPlot function. unintegrated.mc &lt;- merge(metacell.objs[[1]], metacell.objs[-1]) VlnPlot(unintegrated.mc, features = c(&quot;size&quot;, &quot;ann_level_1_purity&quot;), group.by = &#39;dataset&#39;, pt.size = 0.001, ncol = 2) VlnPlot(unintegrated.mc, features = c(&quot;ann_level_2_purity&quot;, &quot;ann_level_3_purity&quot;), group.by = &#39;dataset&#39;, pt.size = 0.001, ncol = 2) We can also use box plots. ggplot(unintegrated.mc@meta.data,aes(x = dataset, y = ann_level_2_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) ggplot(unintegrated.mc@meta.data,aes(x = dataset, y = ann_level_3_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) ggplot(unintegrated.mc@meta.data,aes(x = dataset, y = ann_level_4_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) ggplot(unintegrated.mc@meta.data,aes(x = dataset, y = ann_finest_level_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) Overall metacells from the different datasets present a good purity until the third level of annotation. 6.1.6 Unintegrated analysis Let’s first do a standard dimensionality reduction without batch correction. DefaultAssay(unintegrated.mc) &lt;- &quot;RNA&quot; unintegrated.mc &lt;- NormalizeData(unintegrated.mc) unintegrated.mc &lt;- FindVariableFeatures(unintegrated.mc) unintegrated.mc &lt;- ScaleData(unintegrated.mc) unintegrated.mc &lt;- RunPCA(unintegrated.mc) unintegrated.mc &lt;- RunUMAP(unintegrated.mc, dims = 1:30) umap.unintegrated.datasets &lt;- DimPlot(unintegrated.mc,reduction = &quot;umap&quot;,group.by = &quot;dataset&quot;) + NoLegend() + ggtitle(&quot;unintegrated datasets&quot;) umap.unintegrated.types &lt;- DimPlot(unintegrated.mc, reduction = &quot;umap&quot;, group.by = &quot;ann_level_2&quot;, label = T, repel = T, cols = color.celltypes)+ NoLegend() + ggtitle(&quot;unintegrated cell types&quot;) umap.unintegrated.datasets + umap.unintegrated.types remove(unintegrated.mc) # we won&#39;t use the unintegrated object anymore gc() You can see on the plots that a batch effect is clearly present at the metacell level with metacells clustering by datasets inside the major cell types. Let’s correct it. 6.1.7 Seurat integration Here we will use the standard Seurat_v4 batch correction workflow. As in the original study, we use the dataset rather than the donor as the batch parameter. See method section “Data integration benchmarking” of the original study for more details. This should take less than 5 minutes. # normalize each dataset metacell.objs &lt;- lapply(X = metacell.objs, FUN = function(x) { DefaultAssay(x) &lt;- &quot;RNA&quot;; x &lt;- RenameCells(x, add.cell.id = unique(x$sample)) # we give unique name to metacells x &lt;- NormalizeData(x) x &lt;- FindVariableFeatures(x, selection.method = &quot;vst&quot;, nfeatures = 2000) return(x)}) features &lt;- SelectIntegrationFeatures(object.list = metacell.objs) metacell.objs &lt;- lapply(X = metacell.objs, FUN = function(x) { x &lt;- ScaleData(x, features = features, verbose = FALSE) x &lt;- RunPCA(x, features = features, verbose = FALSE) }) anchors &lt;- FindIntegrationAnchors(object.list = metacell.objs, anchor.features = features, reduction = &quot;rpca&quot;, reference = c(1,2,5), #,9,11 the 5 biggest datasets (in term of metacell number) are used as reference dims = 1:30) remove(metacell.objs) # We don&#39;t need the object list anymore gc() combined.mc &lt;- IntegrateData(anchorset = anchors,k.weight = 50) # we have to update the k.weight parameters because the smallest dataset contain less than 100 metacells Check the obtained object. combined.mc #&gt; An object of class Seurat #&gt; 30024 features across 6061 samples within 2 assays #&gt; Active assay: integrated (2000 features, 2000 variable features) #&gt; 1 other assay present: RNA We can verify that the sum of metacell sizes corresponds to the original number of single-cells sum(combined.mc$size) #&gt; [1] 302920 Seurat returns the slot \"integrated\" that we can use for the downstream analysis. DefaultAssay(combined.mc) = &quot;integrated&quot; combined.mc &lt;- ScaleData(combined.mc, verbose = FALSE) combined.mc &lt;- RunPCA(combined.mc, npcs = 30, verbose = FALSE) combined.mc &lt;- RunUMAP(combined.mc, reduction = &quot;pca&quot;, dims = 1:30, verbose = FALSE) combined.mc &lt;- RunUMAP(combined.mc, dims = 1:30,reduction = &quot;pca&quot;,reduction.name = &quot;umap&quot;, verbose = FALSE) Now we can make the plots and visually compare the results with the unintegrated analysis. umap.integrated.datasets &lt;- DimPlot(combined.mc,reduction = &quot;umap&quot;,group.by = &quot;dataset&quot;) + NoLegend() + ggtitle(&quot;integrated datasets&quot;) umap.integrated.celltypes &lt;- DimPlot(combined.mc,reduction = &quot;umap&quot;,group.by = &quot;ann_level_2&quot;,label = T,repel = T,cols = color.celltypes) + NoLegend() + ggtitle(&quot;integrated cell types&quot;) umap.integrated.datasets + umap.integrated.celltypes + umap.unintegrated.datasets + umap.unintegrated.types Seurat efficiently corrected the batch effect in the data while keeping the cell type separated, but other batch correction methods such as harmony would have also done the job. Note that In the original study, datasets were integrated using SCANVI semi-supervised integration using partial annotation obtained for each dataset prior integration. If you are interested in such supervised approach at the metacell level in R you can have a look to our second example in section @ref(integration_supervised) using the STACAS package. We can navigate in the different annotation levels. library(ggplot2) DimPlot(combined.mc,group.by = &quot;ann_level_1&quot;,reduction = &quot;umap&quot;,label = T,repel = T,cols= color.celltypes) + NoLegend() DimPlot(combined.mc,group.by = &quot;ann_level_2&quot;,reduction = &quot;umap&quot;,label = T,repel = T,cols= color.celltypes) + NoLegend() DimPlot(combined.mc,group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= color.celltypes) + NoLegend() 6.1.8 Downstream analysis 6.1.8.1 Clustering We cluster the metacells based on the corrected PCA space by Seurat. DefaultAssay(combined.mc) &lt;- &quot;integrated&quot; combined.mc &lt;- FindNeighbors(combined.mc, reduction = &quot;pca&quot;, dims = 1:30) combined.mc &lt;- FindClusters(combined.mc, resolution = 0.5) UMAPPlot(combined.mc, label = T) + NoLegend() 6.1.8.2 Deferentially expressed gene (DEG) analysis. Now let’s found the markers of the cluster 19 we’ve just identified. DefaultAssay(combined.mc) &lt;- &quot;RNA&quot; markers18 &lt;- FindMarkers(combined.mc, ident.1 = 18, only.pos = T) #&gt; For a more efficient implementation of the Wilcoxon Rank Sum Test, #&gt; (default method for FindMarkers) please install the limma package #&gt; -------------------------------------------- #&gt; install.packages(&#39;BiocManager&#39;) #&gt; BiocManager::install(&#39;limma&#39;) #&gt; -------------------------------------------- #&gt; After installation of limma, Seurat will automatically use the more #&gt; efficient implementation (no further action necessary). #&gt; This message will be shown once per session head(markers18) #&gt; p_val avg_log2FC pct.1 pct.2 p_val_adj #&gt; HOXD9 0 0.8120847 0.968 0.020 0 #&gt; DTX1 0 0.3972931 0.871 0.021 0 #&gt; STAB2 0 0.4492518 0.758 0.006 0 #&gt; SCN3A 0 0.3283766 0.806 0.012 0 #&gt; GPR182 0 0.6745167 0.952 0.013 0 #&gt; HOXD8 0 1.1639281 1.000 0.025 0 This cluster clearly presents a B cell signature with marker genes such as CD19 and PAX5 genes &lt;-c(&quot;CD19&quot;,&quot;PAX5&quot;) # knwon B cells markers markers18[genes,] #&gt; p_val avg_log2FC pct.1 pct.2 p_val_adj #&gt; NA NA NA NA NA NA #&gt; NA.1 NA NA NA NA NA VlnPlot(combined.mc, genes, ncol = 1) By looking at the metacell annotation (assigned from the original single-cell metadata by MCAT), we can verify that we correctly retrieved the B cell lineage cluster. DimPlot(combined.mc[, combined.mc$integrated_snn_res.0.5 == 18], group.by = c(&quot;ann_level_3&quot;, &quot;integrated_snn_res.0.5&quot;), ncol = 2) 6.1.8.3 Cell type abundances analyses. We can easily make analysis of cell type abundances for different clinical variables as we construct metacell by sample. We have to take metacell size into account for these analyses. For instance we can analyse the proportion of different epithelial cell types depending on the smoking status. library(reshape2) combined.mc.epith &lt;- combined.mc[,combined.mc$ann_level_1 == &quot;Epithelial&quot;] #combined.metacells$major_type &lt;- droplevels(combined.metacells$major_type) smpCounts &lt;- aggregate(combined.mc.epith$size, by=list(sample = combined.mc.epith$sample, major_type = combined.mc.epith$ann_level_3, smoking_status = combined.mc.epith$smoking_status), FUN=sum) remove(combined.mc.epith) gc() ggplot(smpCounts,aes(x = smoking_status,fill=major_type)) + geom_bar(position = &quot;fill&quot;) + scale_fill_manual(values = color.celltypes) + xlab(&quot;% epithelial cells&quot;) Samples from smokers seem to present more AT2 cells but this quick analysis is for illustrative purposes only. In practice it’s far more complex to draw conclusion as we should have considered the variations between samples/donors as well as many other technical (tissue dissociation protocol, tissue sampling method, single-cell platform, … ) and biological (BMI, sex, Age, …) variables. 6.1.9 Conclusion Overall we made a precise simplification of the original atlas using metacells built from each sample separately. By reducing the size of the original atlas by a factor of 50 we could load the data, make an integration to correct batch effect and recapitulate the main different cell types using a reasonable amount of time and memory. In contrast, simply loading the original single-cell data in R using Seurat is extremely time-consuming and challenging even for the most powerful computers. In this first example we used a fully unsupervised workflow and did not use any prior biological knowledge. Authors of the original study made a remarkable work annotating the hundreds of thousands cells of the atlas. In the second example in section @ref(integration_supervised) we propose a supervised workflow using this annotation to guide both the metacell identification and the batch correction. We can save the results for comparison with the second example. saveRDS(combined.mc,&quot;data/HLCA/combined.mc.unsup.rds&quot;) "],["integration_supervised.html", "6.2 Supervised integration", " 6.2 Supervised integration As for the unsupervised integration example, we will work with the Human Cell Lung Atlas core HLCA gathering around 580,000 cells from 107 individuals distributed in 166 samples. Taking advantage of the single-cell annotation of the original study we will build metacells for each cell type in each sample and guide the integration with the cell type label using STACAS. 6.2.1 Data loading Please follow the section 1.4 to retrieve the HLCA atlas, divide the atlas by dataset and save the splitted data in the following folder: “data/HLCA/”. 6.2.2 Setting up the environment First we need to specify that we will work with the MetacellAnalysisToolkit conda environment (needed for anndata relying on reticulate and the MCAT tool). To build the conda environment please follow the instructions on our MetacellAnalysisToolkit github repository. library(reticulate) conda_env &lt;- conda_list()[reticulate::conda_list()$name == &quot;MetacellAnalysisToolkit&quot;,&quot;python&quot;] use_condaenv(conda_env) library(Seurat) library(anndata) library(SuperCell) library(ggplot2) color.celltypes &lt;- c(&#39;#E5D2DD&#39;, &#39;#53A85F&#39;, &#39;#F1BB72&#39;, &#39;#F3B1A0&#39;, &#39;#D6E7A3&#39;, &#39;#57C3F3&#39;, &#39;#476D87&#39;, &#39;#E95C59&#39;, &#39;#E59CC4&#39;, &#39;#AB3282&#39;, &#39;#23452F&#39;, &#39;#BD956A&#39;, &#39;#8C549C&#39;, &#39;#585658&#39;, &#39;#9FA3A8&#39;, &#39;#E0D4CA&#39;, &#39;#5F3D69&#39;, &#39;#58A4C3&#39;, &quot;#b20000&quot;,&#39;#E4C755&#39;, &#39;#F7F398&#39;, &#39;#AA9A59&#39;, &#39;#E63863&#39;, &#39;#E39A35&#39;, &#39;#C1E6F3&#39;, &#39;#6778AE&#39;, &#39;#91D0BE&#39;, &#39;#B53E2B&#39;, &#39;#712820&#39;, &#39;#DCC1DD&#39;, &#39;#CCE0F5&#39;, &#39;#CCC9E6&#39;, &#39;#625D9E&#39;, &#39;#68A180&#39;, &#39;#3A6963&#39;, &#39;#968175&#39;) 6.2.3 Constructing supervised metacell Sikkema et al. made a remarkable job in finely annotating hundreds thousands of cells. Within the framework of this re-analysis, let’s now try to use this prior knowledge to obtain slightly better results using a supervised workflow. We added in section 1.4 a ann_sample column in the metadata of the single cell object. We now can use it to build metacell for each cell type in each sample. If you are limited in memory you should still be able to process the samples by reducing the number of cores (e.g. -l 3) or by sequentially processing the samples (just remove the -l) in a slightly longer time This should take around 30 minutes. for d in data/HLCA/datasets/*; do cli/MCAT -t SuperCell -i $d/sc_adata.h5ad -o $d/sup_mc -a ann_sample -l 3 -n 50 -f 2000 -k 30 -g 50 -s adata done 6.2.4 Load metacell objects We load the .h5ad objects and directly convert them in Seurat objects to benefit from all the functions of this framework. datasets &lt;- list.dirs(&quot;data/HLCA/datasets/&quot;, full.names = F, recursive = F) metacell.files &lt;- sapply(datasets[1:5], FUN = function(x){paste0(&quot;data/HLCA/datasets/&quot;,x,&quot;/sup_mc/mc_adata.h5ad&quot;)}) metacell.objs &lt;- lapply(X = metacell.files, function(X){ adata &lt;- read_h5ad(X) countMatrix &lt;- Matrix::t(adata$X) colnames(countMatrix) &lt;- adata$obs_names rownames(countMatrix) &lt;- adata$var_names sobj &lt;- Seurat::CreateSeuratObject(counts = countMatrix,meta.data = adata$obs) sobj &lt;- RenameCells(sobj, add.cell.id = unique(sobj$sample)) # we give unique name to metacells return(sobj) }) 6.2.5 Merging objects and basic quality control Given the single-cell metadata, the MCAT tool automatically assigns annotations to metacells and computes purities for all the categorical variables present in the metadata of the input single-cell object. Thus, let’s check the purity of our metacells at different level of annotations, as well as their size (number of single cells they contain). To do so we merge the objects together and use Seurat VlnPlot function. unintegrated.mc &lt;- merge(metacell.objs[[1]], metacell.objs[-1]) VlnPlot(unintegrated.mc[, unintegrated.mc$ann_level_3 != &quot;None&quot;], features = c(&quot;size&quot;, &quot;ann_level_2_purity&quot;), group.by = &#39;dataset&#39;, pt.size = 0.001, ncol = 2) #&gt; Warning in SingleExIPlot(type = type, data = data[, x, drop = FALSE], idents = #&gt; idents, : All cells have the same value of ann_level_2_purity. VlnPlot(unintegrated.mc[, unintegrated.mc$ann_level_3 != &quot;None&quot;], features = c(&quot;ann_level_3_purity&quot;, &quot;ann_level_4_purity&quot;), group.by = &#39;dataset&#39;, pt.size = 0.001, ncol=2) #&gt; Warning in SingleExIPlot(type = type, data = data[, x, drop = FALSE], idents = #&gt; idents, : All cells have the same value of ann_level_3_purity. We can also use box plots. p_4 &lt;- ggplot(unintegrated.mc@meta.data, aes(x = dataset, y = ann_level_4_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) + ggtitle(&quot;sup metacells level 4 purity&quot;) + NoLegend() + ylim(c(0,1)) p_finest &lt;- ggplot(unintegrated.mc@meta.data, aes(x = dataset, y = ann_finest_level_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) + ggtitle(&quot;sup metacells finest level purity&quot;) + NoLegend() + ylim(c(0,1)) p_4 + p_finest Overall using supervised metacells construction we obtain pure metacells until the 3rd level of annotation and improve metacell purities for finer levels compared to the unsupervised approach (see previous section @ref(integration_unsupervised)). meta.data.unsup &lt;- readRDS(&quot;data/HLCA/combined.mc.unsup.rds&quot;)@meta.data p_4_unsup &lt;- ggplot(meta.data.unsup, aes(x = dataset, y = ann_level_4_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) + ggtitle(&quot;unsup metacells level 4 purity&quot;) + NoLegend() + ylim(c(0,1)) p_finest_unsup &lt;- ggplot(meta.data.unsup, aes(x = dataset, y = ann_finest_level_purity, fill = dataset)) + geom_boxplot() + scale_x_discrete(guide = guide_axis(angle = 45)) + ggtitle(&quot;unsup metacells finest level purity&quot;) + NoLegend() + ylim(c(0,1)) p_4_unsup | p_4 p_finest_unsup + p_finest 6.2.6 Unintegrated analysis Let’s first do a standard dimensionality reduction without batch correction. DefaultAssay(unintegrated.mc) &lt;- &quot;RNA&quot; unintegrated.mc &lt;- NormalizeData(unintegrated.mc) unintegrated.mc &lt;- FindVariableFeatures(unintegrated.mc) unintegrated.mc &lt;- ScaleData(unintegrated.mc) unintegrated.mc &lt;- RunPCA(unintegrated.mc) unintegrated.mc &lt;- RunUMAP(unintegrated.mc,dims = 1:30) umap.unintegrated.datasets &lt;- DimPlot(unintegrated.mc,reduction = &quot;umap&quot;,group.by = &quot;dataset&quot;) + NoLegend() + ggtitle(&quot;unintegrated datasets&quot;) umap.unintegrated.types &lt;- DimPlot(unintegrated.mc,reduction = &quot;umap&quot;,group.by = &quot;ann_level_2&quot;,label = T,repel = T,cols = color.celltypes)+ NoLegend() + ggtitle(&quot;unintegrated cell types&quot;) umap.unintegrated.datasets + umap.unintegrated.types You can see on the plots that a batch effect is clearly present at the metacell level. Let’s correct it using a supervised approach. 6.2.7 STACAS integration In the original study, datasets were integrated using SCANVI semi-supervised integration using partial annotation obtained for each dataset prior integration. Here in this second example we propose to use a similar approach in R using STACAS. We will use the “ann” labels we used to construct the metacells (3rd level of annotation if available for the cell, otherwise 2nd level). To be noted that, as in the original study, we use the dataset rather than the donor as the batch parameter. See method section Data integration benchmarking of the original study for more details. # Install package if needed if (!requireNamespace(&quot;STACAS&quot;)) remotes::install_github(&quot;carmonalab/STACAS&quot;, upgrade = &quot;never&quot;) library(STACAS) t0_integration &lt;- Sys.time() # normalize and identify variable features for each dataset independently metacell.objs &lt;- lapply(X = metacell.objs, FUN = function(x) { DefaultAssay(x) &lt;- &quot;RNA&quot;; x &lt;- RenameCells(x, add.cell.id = unique(x$sample)) # we give unique name to metacells x &lt;- NormalizeData(x) return(x)}) gc() # Perform a supervised integration of the dataset using STACAS combined.mc &lt;- Run.STACAS(object.list = metacell.objs, anchor.features = 2000, min.sample.size = 80, k.weight = 80, #smallest dataset contains 86 metacells cell.labels = &quot;ann&quot;, # Note that by not you can use STACAS in its unsupervised mode reference = c(1,2,5), # ,5,9,11 the 5 biggest datasets are used as reference dims = 1:30) tf_integration &lt;- Sys.time() tf_integration - t0_integration remove(metacell.objs) # We don&#39;t need the object list anymore gc() Check the obtained object: combined.mc #&gt; An object of class Seurat #&gt; 30024 features across 6719 samples within 2 assays #&gt; Active assay: integrated (2000 features, 2000 variable features) #&gt; 1 other assay present: RNA #&gt; 1 dimensional reduction calculated: pca We can verify that the sum of metacell sizes correspond to the original number of single-cells sum(combined.mc$size) #&gt; [1] 302920 STACAS directly returns a pca for the slot \"integrated\" that we can use to make a UMAP of the corrected data. DefaultAssay(combined.mc) = &quot;integrated&quot; combined.mc &lt;- RunUMAP(combined.mc, dims = 1:30, reduction = &quot;pca&quot;, reduction.name = &quot;umap&quot;) Now we can make the plots and visually compare the results with the unintegrated analysis. umap.stacas.datasets &lt;- DimPlot(combined.mc,reduction = &quot;umap&quot;,group.by = &quot;dataset&quot;) + NoLegend() + ggtitle(&quot;integrated datasets&quot;) umap.stacas.celltypes &lt;- DimPlot(combined.mc,reduction = &quot;umap&quot;,group.by = &quot;ann_level_2&quot;,label = T,repel = T,cols = color.celltypes) + NoLegend() + ggtitle(&quot;integrated cell types&quot;) umap.stacas.datasets + umap.stacas.celltypes + umap.unintegrated.datasets + umap.unintegrated.types STACAS efficiently corrected the batch effect in the data while keeping the cell type separated. We can navigate in the different annotation levels. library(ggplot2) DimPlot(combined.mc,group.by = &quot;ann_level_1&quot;,reduction = &quot;umap&quot;,cols= color.celltypes) DimPlot(combined.mc,group.by = &quot;ann_level_2&quot;,reduction = &quot;umap&quot;,label = T,repel = T,cols= color.celltypes) DimPlot(combined.mc,group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= color.celltypes) + NoLegend() 6.2.8 Comparison with unsupervised analysis we can quickly visually compare these results with the unsupervised integration obtained with Seurat: combined.mc.unsup &lt;- readRDS(&quot;data/HLCA/combined.mc.unsup.rds&quot;) combined.mc$ann_level_3 &lt;- factor(combined.mc$ann_level_3) matched.color.celltypes &lt;- color.celltypes[1:length(levels(combined.mc$ann_level_3))] names(matched.color.celltypes) &lt;- levels(combined.mc$ann_level_3) level3_sup &lt;- DimPlot(combined.mc,group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= matched.color.celltypes) + NoLegend() + ggtitle(&quot;Sup workflow&quot;) level3_unsup &lt;- DimPlot(combined.mc.unsup,group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= matched.color.celltypes) + NoLegend() + ggtitle(&quot;Unsup workflow&quot;) level3_sup + level3_unsup Look at epithelial cells in particular level3_sup &lt;- DimPlot(combined.mc[,combined.mc$ann_level_1 == &quot;Epithelial&quot;],group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= matched.color.celltypes) + NoLegend() + ggtitle(&quot;Sup workflow&quot;) level3_unsup &lt;- DimPlot(combined.mc.unsup[,combined.mc.unsup$ann_level_1 == &quot;Epithelial&quot;],group.by = &quot;ann_level_3&quot;,reduction = &quot;umap&quot;,label = T, repel = T,cols= matched.color.celltypes) + NoLegend() + ggtitle(&quot;Unsup workflow&quot;) level3_sup + level3_unsup 6.2.9 Downstream analysis You can try conduce the same downstream analyses as in the previous example @ref(integration_unsupervised) (clustering, cell type abundances, DEG …). Here to show you the interest of supervised workflow with pure metacell we can zoom on the smooth muscle sub types. Despite the low metacell number for each cell type these different subtypes are separated on the UMAP, especially the rare FAM83D+ smooth muscles that were discovered in the original study. combined.mc$ann &lt;- factor(combined.mc$ann) color.celltypes.ann &lt;- color.celltypes[c(1:length(levels(combined.mc$ann)))] names(color.celltypes.ann) &lt;- levels(combined.mc$ann) DimPlot(combined.mc[,combined.mc$ann_level_2 == &quot;Smooth muscle&quot;],group.by = &quot;ann&quot;,cols = color.celltypes.ann) Using a DEG analysis we can check if we retrieve their markers. MYH11 and CNN1 genes are canonical smooth muscle markers while FAM83D was found uniquely and consistently expressed by this rare cell type in the original study DefaultAssay(combined.mc) &lt;- &quot;RNA&quot; Idents(combined.mc) &lt;- &quot;ann&quot; markersSmoothMuscle &lt;- FindMarkers(combined.mc,ident.1 = &quot;Smooth muscle FAM83D+&quot;,only.pos = T) head(markersSmoothMuscle) #&gt; p_val avg_log2FC pct.1 pct.2 p_val_adj #&gt; NMRK2 8.716260e-183 0.6673490 0.421 0.003 2.442645e-178 #&gt; SLITRK3 2.001021e-154 0.3900334 0.421 0.004 5.607660e-150 #&gt; ASB5 3.578963e-108 0.4001160 0.368 0.004 1.002969e-103 #&gt; HSPB3 1.156804e-107 0.5994731 0.579 0.011 3.241826e-103 #&gt; BRINP3 1.402803e-107 0.8195490 0.526 0.009 3.931215e-103 #&gt; MYOCD 3.863561e-101 1.3110302 0.684 0.017 1.082724e-96 markersSmoothMuscle[c(&quot;MYH11&quot;,&quot;CNN1&quot;,&quot;FAM83D&quot;),] #&gt; p_val avg_log2FC pct.1 pct.2 p_val_adj #&gt; MYH11 2.875397e-24 4.254605 1.000 0.227 8.058012e-20 #&gt; CNN1 9.983682e-56 4.901585 1.000 0.080 2.797827e-51 #&gt; FAM83D 3.289285e-13 2.580875 0.789 0.249 9.217893e-09 # Many classical smooth muscles cells are not annotated at the 3rd level of annotation (labelled None) VlnPlot(combined.mc,features = c(&quot;MYH11&quot;,&quot;CNN1&quot;,&quot;FAM83D&quot;),group.by = &quot;ann&quot;,ncol = 2,cols = color.celltypes.ann) 6.2.10 Conclusion Taking advantage of the single cell annotation in a supervised workflow we could improve the precision of our metacell re-analysis. When cell annotations are given and of good quality, which is far from being the case every time, building metacells accordingly and use a supervised integration workflow should be preferred. To be noted that we used an intermediary level of annotation to supervise our analysis, using a finer level for this data would have resulted in a longer time for metacell building. PLus, we would have obtained to few metacells per cell type in the different sample to be able to make an efficient supervised batch correction with STACAS. To be more precise at the cost of computational efficiency one could also try to reduce the graining level of the analysis (using a graining level of 20 for instance), To conclude, keep in mind that in one hand, for certain analysis such as rare cell type analysis, we will never achieve the same level of sensitivity with metacells compared to single-cells. On the other hand, you certainly won’t be able to analyze so many single-cells so easily, and you may not need extremely fine cell-type resolution for many analyses. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
